---
ID: "10fc34f1-3206-4bc0-8ce4-716f616e0449"
Parent: "4efe74c8-53fb-4a08-a60b-d093b5333239"
Template: "962b53c4-f93b-4df9-9821-415c867b8903"
Path: /sitecore/media library/Feature/Experience Accelerator/Composites/OnPageEditing/Scripts/onPageEditing
SharedFields:
- ID: "06d5295c-ed2f-4a54-9bf2-26228d113318"
  Hint: __Icon
  Value: "-/media/10FC34F132064BC08CE4716F616E0449.ashx?h=16&thn=1&w=16"
- ID: "40e50ed9-ba07-4702-992e-a912738d32dc"
  Hint: Blob
  BlobID: "10fc34f1-3206-4bc0-8ce4-716f616e0449"
  Value: 
- ID: "6954b7c7-2487-423f-8600-436cb3b6dc0e"
  Hint: Size
  Value: 15457
- ID: "6f47a0a5-9c94-4b48-abeb-42d38def6054"
  Hint: Mime Type
  Value: "application/x-javascript"
- ID: "ba3f86a2-4a1c-4d78-b63d-91c2779c1b5e"
  Hint: __Sortorder
  Value: 0
- ID: "c06867fe-9a43-4c7d-b739-48780492d06f"
  Hint: Extension
  Value: js
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20160509T120144Z
    - ID: "8cdc337e-a112-42fb-bbb4-4143751e123f"
      Hint: __Revision
      Value: "5fc79902-e094-4841-8cab-d3df83084d8e"
