---
ID: "295fa0f0-8738-48ee-822a-114531fb9d76"
Parent: "dfcbfa5a-2e37-418a-adb7-f411ecae89a9"
Template: "962b53c4-f93b-4df9-9821-415c867b8903"
Path: "/sitecore/media library/Base Themes/SearchTheme/Scripts/component-search-results-filter"
SharedFields:
- ID: "06d5295c-ed2f-4a54-9bf2-26228d113318"
  Hint: __Icon
  Value: "-/media/295FA0F0873848EE822A114531FB9D76.ashx?h=16&thn=1&w=16"
- ID: "40e50ed9-ba07-4702-992e-a912738d32dc"
  Hint: Blob
  BlobID: "295fa0f0-8738-48ee-822a-114531fb9d76"
  Value: LyoqCiAqIEZhY2V0IGZhY2V0IHJlc3VsdCBmaWx0ZXIgY29tcG9uZW50IGZ1bmN0aW9uYWxpdHkKICogQG1vZHVsZSBmYWNldFJlc3VsdHNGaWx0ZXIKICogQHBhcmFtICB7alF1ZXJ5fSAkIEluc3RhbmNlIG9mIGpRdWVyeQogKiBAcGFyYW0gIHtEb2N1bWVudH0gZG9jdW1lbnQgZG9tIGRvY3VtZW50IG9iamVjdAogKiBAcmV0dXJuIHtPYmplY3R9IGxpc3Qgb2YgbWV0aG9kcyBmb3Igd29ya2luZyB3aXRoIGNvbXBvbmVudCBmYWNldCByZXN1bHQgZmlsdGVyCiovClhBLmNvbXBvbmVudC5zZWFyY2guZmFjZXQucmVzdWx0c2ZpbHRlciA9IChmdW5jdGlvbiAoJCwgZG9jdW1lbnQpIHsKICAgIC8qKgogICAgKiBUaGlzIG9iamVjdCBzdG9yZXMgYWxsIHB1YmxpYyBhcGkgbWV0aG9kcwogICAgKiBAdHlwZSB7T2JqZWN0LjxNZXRob2RzPn0KICAgICogQG1lbWJlck9mIG1vZHVsZTpmYWNldFJlc3VsdHNGaWx0ZXIKICAgICovCiAgICB2YXIgYXBpID0ge30sCiAgICAgICAgdXJsSGVscGVyTW9kZWwsCiAgICAgICAgcXVlcnlNb2RlbCwKICAgICAgICBhcGlNb2RlbDsKICAgIC8qKgogICAgKiBAbmFtZSBtb2R1bGU6ZmFjZXRSZXN1bHRzRmlsdGVyLkZhY2V0UmVzdWx0c0ZpbHRlck1vZGVsCiAgICAqIEBjb25zdHJ1Y3RvcgogICAgKiBAYXVnbWVudHMgQmFja2JvbmUuTW9kZWwKICAgICovCiAgICB2YXIgRmFjZXRSZXN1bHRzRmlsdGVyTW9kZWwgPSBYQS5jb21wb25lbnQuc2VhcmNoLmJhc2VNb2RlbC5leHRlbmQoCiAgICAgICAgLyoqIEBsZW5kcyBtb2R1bGU6ZmFjZXRSZXN1bHRzRmlsdGVyLkZhY2V0UmVzdWx0c0ZpbHRlck1vZGVsLnByb3RvdHlwZSAqKi8KICAgICAgICB7CiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAqIERlZmF1bHQgbW9kZWwgb3B0aW9ucwogICAgICAgICAgICAqIEBkZWZhdWx0CiAgICAgICAgICAgICovCiAgICAgICAgICAgIGRlZmF1bHRzOiB7CiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogIjxkaXYgY2xhc3M9J2ZhY2V0LXNlYXJjaC1maWx0ZXIgPCUgaWYoIXNob3dBbGxGYWNldHMpeyU+ZmFjZXQtaGlkZWQ8JX0lPic+PCUgIiArCiAgICAgICAgICAgICAgICAgICAgIl8uZm9yRWFjaChmYWNldC5WYWx1ZXMsIGZ1bmN0aW9uKHZhbHVlLGtleSl7IiArCiAgICAgICAgICAgICAgICAgICAgIiU+PHAgY2xhc3M9J2ZhY2V0LXZhbHVlIDwlIGlmKGhpZ2hsaWdodEJlaGF2aW91cjw9a2V5KXsgJT4gaGlkZS1mYWNldC12YWx1ZSA8JSB9ICU+JyBkYXRhLWZhY2V0VmFsdWU9JzwlPSB2YWx1ZS5OYW1lICE9PSAnJyA/IGVuY29kZVVSSSh2YWx1ZS5OYW1lKS5yZXBsYWNlKC8nL2csJyUyNycpIDogJ19lbXB0eV8nICU+Jz4iICsKICAgICAgICAgICAgICAgICAgICAiPHNwYW4+PCU9IHZhbHVlLk5hbWUgIT09ICcnID8gc2FuaXRpemUodmFsdWUuTmFtZSkgOiBlbXB0eVRleHQgJT4gIiArCiAgICAgICAgICAgICAgICAgICAgIjxzcGFuIGNsYXNzPSdmYWNldC1jb3VudCc+KDwlPSB2YWx1ZS5Db3VudCAlPik8L3NwYW4+IiArCiAgICAgICAgICAgICAgICAgICAgIjwvc3Bhbj4iICsKICAgICAgICAgICAgICAgICAgICAiPC9wPjwlIiArCiAgICAgICAgICAgICAgICAgICAgIiB9KTsgJT4iICsKICAgICAgICAgICAgICAgICAgICAiPCUgaWYoaGlnaGxpZ2h0QmVoYXZpb3VyPj0xICYmIHJlc3VsdHNDb3VudD5oaWdobGlnaHRCZWhhdmlvdXIpeyAlPiIgKwogICAgICAgICAgICAgICAgICAgICI8ZGl2IGNsYXNzPSd0b29nbGUtZmFjZXQtdmlzaWJpbGl0eSc+PCUgaWYoc2hvd0FsbEZhY2V0cyl7ICU+PCU9c2hvd0xlc3NUZXh0JT48JX1lbHNleyU+PCU9c2hvd01vcmVUZXh0JT48JX0gJT48L2Rpdj4iICsKICAgICAgICAgICAgICAgICAgICAiPCV9JT4iICsKICAgICAgICAgICAgICAgICAgICAiPC9kaXY+IiwKCiAgICAgICAgICAgICAgICB0ZW1wbGF0ZU11bHRpOiAiPGRpdiBjbGFzcz0nZmFjZXQtc2VhcmNoLWZpbHRlciA8JSBpZighc2hvd0FsbEZhY2V0cyl7JT5mYWNldC1oaWRlZDwlfSU+Jz48JSAiICsKICAgICAgICAgICAgICAgICAgICAiXy5mb3JFYWNoKGZhY2V0LlZhbHVlcywgZnVuY3Rpb24odmFsdWUsa2V5KXsiICsKICAgICAgICAgICAgICAgICAgICAiJT48cCBjbGFzcz0nZmFjZXQtdmFsdWUgPCUgaWYoaGlnaGxpZ2h0QmVoYXZpb3VyPD1rZXkpeyAlPiBoaWRlLWZhY2V0LXZhbHVlIDwlIH0gJT4gPCUgaWYoYWN0aXZlLmluZGV4T2YodmFsdWUuTmFtZSkgPiAtMSl7ICU+IGFjdGl2ZS1mYWNldCA8JSB9ICU+JyBkYXRhLWZhY2V0VmFsdWU9JzwlPSB2YWx1ZS5OYW1lICE9PSAnJyA/IGVuY29kZVVSSSh2YWx1ZS5OYW1lKS5yZXBsYWNlKC8nL2csJyUyNycpIDogJ19lbXB0eV8nICU+Jz4iICsKICAgICAgICAgICAgICAgICAgICAiPGlucHV0IHR5cGU9J2NoZWNrYm94JyBuYW1lPSdmYWNldFZhbHVlJyAvPiIgKwogICAgICAgICAgICAgICAgICAgICI8bGFiZWwgZm9yPSdmYWNldE5hbWUnPjwlPSB2YWx1ZS5OYW1lICE9PSAnJyA/IHNhbml0aXplKHZhbHVlLk5hbWUpIDogZW1wdHlUZXh0ICU+ICIgKwogICAgICAgICAgICAgICAgICAgICI8c3BhbiBjbGFzcz0nZmFjZXQtY291bnQnIGRhdGEtZmFjZXRDb3VudD0nPCU9IHZhbHVlLkNvdW50ICU+Jz4oPCU9IHZhbHVlLkNvdW50ICU+KTwvc3Bhbj4iICsKICAgICAgICAgICAgICAgICAgICAiPC9sYWJlbD4iICsKICAgICAgICAgICAgICAgICAgICAiPC9wPjwlIiArCiAgICAgICAgICAgICAgICAgICAgIiB9KTsgJT4iICsKICAgICAgICAgICAgICAgICAgICAiPCUgaWYoaGlnaGxpZ2h0QmVoYXZpb3VyPj0xICYmIHJlc3VsdHNDb3VudD5oaWdobGlnaHRCZWhhdmlvdXIpeyAlPiIgKwogICAgICAgICAgICAgICAgICAgICI8ZGl2IGNsYXNzPSd0b29nbGUtZmFjZXQtdmlzaWJpbGl0eSc+PCUgaWYoc2hvd0FsbEZhY2V0cyl7ICU+PCU9c2hvd0xlc3NUZXh0JT48JX1lbHNleyU+PCU9c2hvd01vcmVUZXh0JT48JX0gJT48L2Rpdj4iICsKICAgICAgICAgICAgICAgICAgICAiPCV9JT4iICsKICAgICAgICAgICAgICAgICAgICAiPC9kaXY+IiwKICAgICAgICAgICAgICAgIGRhdGFQcm9wZXJ0aWVzOiB7fSwKICAgICAgICAgICAgICAgIGJsb2NrTmV4dFJlcXVlc3Q6IGZhbHNlLAogICAgICAgICAgICAgICAgcmVzdWx0RGF0YToge30sCiAgICAgICAgICAgICAgICB0aW1lU3RhbXA6ICcnLAogICAgICAgICAgICAgICAgc2hvd0FsbEZhY2V0czogZmFsc2UsCiAgICAgICAgICAgICAgICBzaWc6IFtdLAogICAgICAgICAgICAgICAgaW5pdGlhbGl6ZWQ6IGZhbHNlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAqIExpc3RlbnMgdG8gY2hhbmdlcyBvbiBmYWNldHMgYW5kIGhhc2gKICAgICAgICAgICAqIEBsaXN0ZW5zIG1vZHVsZTpYQS5jb21wb25lbnQuc2VhcmNoLnZlbnR+ZXZlbnQ6ZmFjZXQtZGF0YS1sb2FkZWQKICAgICAgICAgICAqIEBsaXN0ZW5zIG1vZHVsZTpYQS5jb21wb25lbnQuc2VhcmNoLnZlbnR+ZXZlbnQ6ZmFjZXQtZGF0YS1maWx0ZXJlZAogICAgICAgICAgICogQGxpc3RlbnMgbW9kdWxlOlhBLmNvbXBvbmVudC5zZWFyY2gudmVudH5ldmVudDpmYWNldC1kYXRhLXBhcnRpYWwtZmlsdGVyZWQKICAgICAgICAgICAqIEBsaXN0ZW5zIG1vZHVsZTpYQS5jb21wb25lbnQuc2VhcmNoLnZlbnR+ZXZlbnQ6aGFzaENoYW5nZWQKICAgICAgICAgICAqLwogICAgICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAvL2V2ZW50IHRvIGdldCBkYXRhIGF0IHRoZSBiZWdpbmluZyBvciBpbiBjYXNlIHRoYXQgdGhlcmUgYXJlIG5vIGhhc2ggcGFyYW1ldGVycyBpbiB0aGUgdXJsIC0gb25lIHJlcXVlc3QgZm9yIGFsbCBjb250cm9scwogICAgICAgICAgICAgICAgWEEuY29tcG9uZW50LnNlYXJjaC52ZW50Lm9uKCJmYWNldC1kYXRhLWxvYWRlZCIsIHRoaXMucHJvY2Vzc0RhdGEuYmluZCh0aGlzLCBmYWxzZSkpOwogICAgICAgICAgICAgICAgLy9pZiBpbiB0aGUgdXJsIGhhc2ggd2UgaGF2ZSB0aGlzIGNvbnRyb2wgZmFjZXQgbmFtZSAoc29tZW9uZSBjbGlja2VkIHRoaXMgY29udHJvbCkgdGhlbiB3ZSBoYXZlIHRvIGxpc3RlbiBmb3IgcGFydGlhbCBmaWx0ZXJpbmcKICAgICAgICAgICAgICAgIFhBLmNvbXBvbmVudC5zZWFyY2gudmVudC5vbigiZmFjZXQtZGF0YS1wYXJ0aWFsLWZpbHRlcmVkIiwgdGhpcy5wcm9jZXNzRGF0YS5iaW5kKHRoaXMsIHRydWUpKTsKICAgICAgICAgICAgICAgIC8vaW4gY2FzZSB0aGF0IHdlIGFyZSBub3QgZmlsdGVyaW5nIGJ5IHRoaXMgY29udHJvbCAobm90IGNsaWNrZWQpCiAgICAgICAgICAgICAgICBYQS5jb21wb25lbnQuc2VhcmNoLnZlbnQub24oImZhY2V0LWRhdGEtZmlsdGVyZWQiLCB0aGlzLnByb2Nlc3NEYXRhLmJpbmQodGhpcywgZmFsc2UpKTsKICAgICAgICAgICAgICAgIC8vZXZlbnQgYWZ0ZXIgY2hhbmdlIG9mIGhhc2gKICAgICAgICAgICAgICAgIFhBLmNvbXBvbmVudC5zZWFyY2gudmVudC5vbigiaGFzaENoYW5nZWQiLCB0aGlzLnVwZGF0ZUNvbXBvbmVudC5iaW5kKHRoaXMpKTsKCiAgICAgICAgICAgICAgICB0aGlzLnNldCh7IGZhY2V0QXJyYXk6IFtdIH0pOwogICAgICAgICAgICB9LAogICAgICAgICAgICAvKioKICAgICAgICAgICAgICogVG9nZ2xlcyB2YWx1ZSBvZiBibG9ja05leHRSZXF1ZXN0IHZhcmlhYmxlCiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6ZmFjZXRSZXN1bHRzRmlsdGVyLkZhY2V0UmVzdWx0c0ZpbHRlck1vZGVsCiAgICAgICAgICAgICAqIEBhbGlhcyBtb2R1bGU6ZmFjZXRSZXN1bHRzRmlsdGVyLkZhY2V0UmVzdWx0c0ZpbHRlck1vZGVsI3RvZ2dsZUJsb2NrUmVxdWVzdHMKICAgICAgICAgICAgICovCiAgICAgICAgICAgIHRvZ2dsZUJsb2NrUmVxdWVzdHM6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuZ2V0KCJibG9ja05leHRSZXF1ZXN0Iik7CiAgICAgICAgICAgICAgICB0aGlzLnNldCh0aGlzLmdldCgiYmxvY2tOZXh0UmVxdWVzdCIpLCAhc3RhdGUpOwogICAgICAgICAgICB9LAogICAgICAgICAgICAvKioKICAgICAgICAgICAgKiBQcm9jZXNzZXMgZGF0YSB0aGF0IGNvbWVzIGFzIHBhcmFtZXRlciB1cGRhdGUKICAgICAgICAgICAgKiBtb2RlbCBhbmQgc29ydCBmYWNldHMKICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSBEYXRhIGZyb20gc2VydmVyIHdpdGggZmFjZXQgdmFsdWVzCiAgICAgICAgICAgICogQG1lbWJlcm9mIG1vZHVsZTpmYWNldFJlc3VsdHNGaWx0ZXIuRmFjZXRSZXN1bHRzRmlsdGVyTW9kZWwKICAgICAgICAgICAgKiBAYWxpYXMgbW9kdWxlOmZhY2V0UmVzdWx0c0ZpbHRlci5GYWNldFJlc3VsdHNGaWx0ZXJNb2RlbCNwcm9jZXNzRGF0YQogICAgICAgICAgICAqLwogICAgICAgICAgICBwcm9jZXNzRGF0YTogZnVuY3Rpb24gKHBhcnRpYWxGaWx0ZXJpbmcsIGRhdGEpIHsKICAgICAgICAgICAgICAgIHZhciBpbnN0ID0gdGhpcywKICAgICAgICAgICAgICAgICAgICBkYXRhUHJvcGVydGllcyA9IHRoaXMuZ2V0KCdkYXRhUHJvcGVydGllcycpLAogICAgICAgICAgICAgICAgICAgIGZhY2V0S2V5ID0gZGF0YVByb3BlcnRpZXMuZi50b0xvd2VyQ2FzZSgpLAogICAgICAgICAgICAgICAgICAgIHNpZyA9IGRhdGFQcm9wZXJ0aWVzLnNlYXJjaFJlc3VsdHNTaWduYXR1cmUuc3BsaXQoJywnKSwKICAgICAgICAgICAgICAgICAgICBzb3J0T3JkZXIgPSBkYXRhUHJvcGVydGllcy5zb3J0T3JkZXIsCiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbGl6ZWQsCiAgICAgICAgICAgICAgICAgICAgdXBkYXRlZERhdGEsCiAgICAgICAgICAgICAgICAgICAgaTsKCiAgICAgICAgICAgICAgICBpZiAoZGF0YS5TaWduYXR1cmUgPT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICBkYXRhLlNpZ25hdHVyZSA9ICIiOwogICAgICAgICAgICAgICAgfQoKCiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2lnLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuRmFjZXRzLmxlbmd0aCA+IDAgJiYgKGRhdGEuU2lnbmF0dXJlID09PSBzaWdbaV0pIHx8IGRhdGEuU2lnbmF0dXJlID09PSAiIiB8fCBkYXRhLlNpZ25hdHVyZSA9PT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmFjZWREYXRhID0gXy5maW5kKGRhdGEuRmFjZXRzLCBmdW5jdGlvbiAoZikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGYuS2V5LnRvTG93ZXJDYXNlKCkgPT09IGZhY2V0S2V5OwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmYWNlZERhdGEgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaWcubGVuZ3RoID4gMSAmJiBzaWcuaW5kZXhPZihkYXRhLlNpZ25hdHVyZSkgIT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdHdvIHNpZ25hdHVyZXMsIHR3byBzZWFyY2ggcmVzdWx0cyBjb21wb25lbnRzIG9uIHRoZSBwYWdlLCBhZ2dyZWdhdGluZyByZXN1bHRzIGZyb20gdHdvIHNlYXJjaCByZXN1bHRzIGNvbXBvbmVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZERhdGEgPSBpbnN0LmdldCgicmVzdWx0RGF0YSIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbGl6ZWQgPSBpbnN0LmdldCgnaW5pdGlhbGl6ZWRfJyArIHNpZ1tpXSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHVwZGF0ZWREYXRhKS5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkRGF0YS5WYWx1ZXMgPSB7fTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXBhcnRpYWxGaWx0ZXJpbmcgfHwgKHBhcnRpYWxGaWx0ZXJpbmcgJiYgIWluaXRpYWxpemVkKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbmV3SXRlbSBpbiBmYWNlZERhdGEuVmFsdWVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cGRhdGVkID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZXhpc3RpbmdJdGVtIGluIHVwZGF0ZWREYXRhLlZhbHVlcykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZhY2VkRGF0YS5WYWx1ZXNbbmV3SXRlbV0uTmFtZSA9PSB1cGRhdGVkRGF0YS5WYWx1ZXNbZXhpc3RpbmdJdGVtXS5OYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZERhdGEuVmFsdWVzW2V4aXN0aW5nSXRlbV0uQ291bnQgKz0gZmFjZWREYXRhLlZhbHVlc1tuZXdJdGVtXS5Db3VudDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1cGRhdGVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkRGF0YS5WYWx1ZXNbT2JqZWN0LmtleXModXBkYXRlZERhdGEuVmFsdWVzKS5sZW5ndGhdID0gZmFjZWREYXRhLlZhbHVlc1tuZXdJdGVtXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3NhdmUgdGhhdCBkYXRhIGZvciB0aGlzIHNpZ25hdHVyZSBoYXMgYmVlbiBpbml0aWFsaXplZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3Quc2V0KCdpbml0aWFsaXplZF8nICsgc2lnW2ldLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWREYXRhID0gaW5zdC5vYmplY3RUb0FycmF5KHVwZGF0ZWREYXRhLlZhbHVlcyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNvcnRGYWNldEFycmF5KHNvcnRPcmRlciwgdXBkYXRlZERhdGEpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFjZWREYXRhLlZhbHVlcyA9IHVwZGF0ZWREYXRhOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdC5zZXQoeyByZXN1bHREYXRhOiBmYWNlZERhdGEgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc29ydEZhY2V0QXJyYXkoc29ydE9yZGVyLCBmYWNlZERhdGEuVmFsdWVzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3Quc2V0KHsgcmVzdWx0RGF0YTogZmFjZWREYXRhIH0pOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAvKioKICAgICAgICAgICAgICogVXBkYXRlcyBtb2RlbCB2YWx1ZSAnZmFjZXRBcnJheScgd2l0aCB2YWx1ZXMgZnJvbSB2YWx1ZXNTdHJpbmcgcGFyYW1ldGVyCiAgICAgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZXNTdHJpbmcgZmFjZXQgdmFsdWVzIHNlcGFyYXRlZCBieSBjb21hCiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6ZmFjZXRSZXN1bHRzRmlsdGVyLkZhY2V0UmVzdWx0c0ZpbHRlck1vZGVsCiAgICAgICAgICAgICAqIEBhbGlhcyBtb2R1bGU6ZmFjZXRSZXN1bHRzRmlsdGVyLkZhY2V0UmVzdWx0c0ZpbHRlck1vZGVsI3VwZGF0ZUZhY2V0QXJyYXkKICAgICAgICAgICAgICovCiAgICAgICAgICAgIHVwZGF0ZUZhY2V0QXJyYXk6IGZ1bmN0aW9uICh2YWx1ZXNTdHJpbmcpIHsKICAgICAgICAgICAgICAgIGlmICh2YWx1ZXNTdHJpbmcpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVzID0gdmFsdWVzU3RyaW5nLnNwbGl0KCJ8fCIpLAogICAgICAgICAgICAgICAgICAgICAgICBhcnJheSA9IFtdOwogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5LnB1c2godmFsdWVzW2ldKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXQoeyBmYWNldEFycmF5OiBfLnVuaXF1ZShhcnJheSkgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBTZXRzIG9wdGlvbiBzZWxlY3RlZCB2YWx1ZSB0byBtb2RlbCBiYXNlZCBvbiBoYXNoCiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIEhhc2ggc3RvcmVkIGFzIGFuIG9iamVjdAogICAgICAgICAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmZhY2V0UmVzdWx0c0ZpbHRlci5GYWNldFJlc3VsdHNGaWx0ZXJNb2RlbAogICAgICAgICAgICAgKiBAYWxpYXMgbW9kdWxlOmZhY2V0UmVzdWx0c0ZpbHRlci5GYWNldFJlc3VsdHNGaWx0ZXJNb2RlbCN1cGRhdGVDb21wb25lbnQKICAgICAgICAgICAgICovCiAgICAgICAgICAgIHVwZGF0ZUNvbXBvbmVudDogZnVuY3Rpb24gKGhhc2gpIHsKICAgICAgICAgICAgICAgIHZhciBzaWcgPSB0aGlzLmdldCgic2lnIik7CiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2lnLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNoLmhhc093blByb3BlcnR5KHNpZ1tpXSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXQoeyBmYWNldEFycmF5OiBbXSB9KTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUZhY2V0QXJyYXkoaGFzaFtzaWdbaV1dKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgLy9pbiBzb21lIGNhc2VzIGNoYW5nZSBvZiBmYWNldEFycmF5IGRvZXNuJ3QgdHJpZ2dlciBtb2RlbCBjaGFuZ2UgZXZlbnQgKHdoeT8pIGFuZCB2aWV3IGlzbid0IHVwZGF0ZXMKICAgICAgICAgICAgICAgICAgICAvL2FuZCBiZWNhdXNlIG9mIHRoYXQgdGltZVN0YW1wIGlzIHVwZGF0ZWQgd2hpY2ggcHJvcGVybHkgdHJpZ2dlcnMgbW9kZWwgY2hhbmdlIGV2ZW50CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXQoInRpbWVTdGFtcCIsIChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAvKioKICAgICogQG5hbWUgbW9kdWxlOmZhY2V0UmVzdWx0c0ZpbHRlci5GYWNldFJlc3VsdHNGaWx0ZXJWaWV3CiAgICAqIEBjb25zdHJ1Y3RvcgogICAgKiBAYXVnbWVudHMgQmFja2JvbmUuVmlldwogICAgKi8KICAgIHZhciBGYWNldFJlc3VsdHNGaWx0ZXJWaWV3ID0gWEEuY29tcG9uZW50LnNlYXJjaC5iYXNlVmlldy5leHRlbmQoCiAgICAgICAgLyoqIEBsZW5kcyBtb2R1bGU6ZmFjZXRSZXN1bHRzRmlsdGVyLkZhY2V0UmVzdWx0c0ZpbHRlclZpZXcucHJvdG90eXBlICoqLwogICAgICAgIHsKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICogSW5pdGlhbGx5IHNldHMgZGF0YSB0byBtb2RlbCBhbmQgd2F0Y2hlcyBldmVudHMgb24gd2hpY2gKICAgICAgICAgICAgKiB2aWV3IHNob3VsZCBiZSB1cGRhdGVkCiAgICAgICAgICAgICogQGxpc3RlbnMgbW9kdWxlOmZhY2V0UmVzdWx0c0ZpbHRlci5GYWNldFJlc3VsdHNGaWx0ZXJNb2RlbH5ldmVudDpjaGFuZ2UKICAgICAgICAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmZhY2V0UmVzdWx0c0ZpbHRlci5GYWNldFJlc3VsdHNGaWx0ZXJWaWV3CiAgICAgICAgICAgICogQGFsaWFzIG1vZHVsZTpmYWNldFJlc3VsdHNGaWx0ZXIuRmFjZXRSZXN1bHRzRmlsdGVyVmlldyNpbml0aWFsaXplCiAgICAgICAgICAgICovCiAgICAgICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciBkYXRhUHJvcGVydGllcyA9IHRoaXMuJGVsLmRhdGEoKSwKICAgICAgICAgICAgICAgICAgICBoYXNoID0gcXVlcnlNb2RlbC5wYXJzZUhhc2hQYXJhbWV0ZXJzKHdpbmRvdy5sb2NhdGlvbi5oYXNoKSwKICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzID0gZGF0YVByb3BlcnRpZXMucHJvcGVydGllcywKICAgICAgICAgICAgICAgICAgICBzaWduYXR1cmVzLAogICAgICAgICAgICAgICAgICAgIGk7CgogICAgICAgICAgICAgICAgaWYgKGRhdGFQcm9wZXJ0aWVzLnByb3BlcnRpZXMuc2VhcmNoUmVzdWx0c1NpZ25hdHVyZSA9PT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgIGRhdGFQcm9wZXJ0aWVzLnByb3BlcnRpZXMuc2VhcmNoUmVzdWx0c1NpZ25hdHVyZSA9ICIiOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHNpZ25hdHVyZXMgPSB0aGlzLnRyYW5zbGF0ZVNpZ25hdHVyZXMocHJvcGVydGllcy5zZWFyY2hSZXN1bHRzU2lnbmF0dXJlLCBwcm9wZXJ0aWVzLmYpOwoKICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuc2V0KHsgZGF0YVByb3BlcnRpZXM6IHByb3BlcnRpZXMgfSk7CiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLnNldCgic2lnIiwgc2lnbmF0dXJlcyk7CgogICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHNpZ25hdHVyZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIWpRdWVyeS5pc0VtcHR5T2JqZWN0KF8ucGljayhoYXNoLCBzaWduYXR1cmVzW2ldKSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlcyA9IF8udmFsdWVzKF8ucGljayhoYXNoLCBzaWduYXR1cmVzW2ldKSlbMF07CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZWwudXBkYXRlRmFjZXRBcnJheSh2YWx1ZXMpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRoaXMubW9kZWwub24oImNoYW5nZSIsIHRoaXMucmVuZGVyLCB0aGlzKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIGxpc3Qgb2YgZXZlbnRzIGZvciBCYWNrYm9uZSBWaWV3CiAgICAgICAgICAgICogQG1lbWJlcm9mIG1vZHVsZTpmYWNldFJlc3VsdHNGaWx0ZXIuRmFjZXRSZXN1bHRzRmlsdGVyVmlldwogICAgICAgICAgICAqIEBhbGlhcyBtb2R1bGU6ZmFjZXRSZXN1bHRzRmlsdGVyLkZhY2V0UmVzdWx0c0ZpbHRlclZpZXcjZXZlbnRzCiAgICAgICAgICAgICAqLwogICAgICAgICAgICBldmVudHM6IHsKICAgICAgICAgICAgICAgICdjbGljayAuZmFjZXQtdmFsdWUnOiAndXBkYXRlRmFjZXQnLAogICAgICAgICAgICAgICAgJ2NsaWNrIC5maWx0ZXJCdXR0b24nOiAndXBkYXRlRmFjZXQnLAogICAgICAgICAgICAgICAgJ2NsaWNrIC5jbGVhci1maWx0ZXInOiAncmVtb3ZlRmFjZXQnLAogICAgICAgICAgICAgICAgJ2NsaWNrIC5ib3R0b20tcmVtb3ZlLWZpbHRlciA+IGJ1dHRvbic6ICdyZW1vdmVGYWNldCcsCiAgICAgICAgICAgICAgICAnY2xpY2sgLnRvb2dsZS1mYWNldC12aXNpYmlsaXR5JzogJ3Rvb2dsZUZhY2V0VmlzaWJpbGl0eScKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHRvb2dsZUZhY2V0VmlzaWJpbGl0eTogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdmFyIHNob3dGYWNldHMgPSB0aGlzLm1vZGVsLmdldCgnc2hvd0FsbEZhY2V0cycpOwogICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5zZXQoJ3Nob3dBbGxGYWNldHMnLCAhc2hvd0ZhY2V0cyk7CgogICAgICAgICAgICB9LAogICAgICAgICAgICAvKioKICAgICAgICAgICAgKiBVcGRhdGVzIG1vZGVsICdmYWNldEFycmF5JyBiYXNlZCBvbiBwYXJhbXMKICAgICAgICAgICAgKiBAcGFyYW0ge0V2ZW50fSAgcGFyYW0gRXZlbnQgb2JqZWN0IHdpdGggY3VycmVudCB0YXJnZXQKICAgICAgICAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmZhY2V0UmVzdWx0c0ZpbHRlci5GYWNldFJlc3VsdHNGaWx0ZXJWaWV3CiAgICAgICAgICAgICogQGFsaWFzIG1vZHVsZTpmYWNldFJlc3VsdHNGaWx0ZXIuRmFjZXRSZXN1bHRzRmlsdGVyVmlldyN1cGRhdGVGYWNldAogICAgICAgICAgICAqLwogICAgICAgICAgICB1cGRhdGVGYWNldDogZnVuY3Rpb24gKHBhcmFtKSB7CiAgICAgICAgICAgICAgICB2YXIgY3VycmVudEZhY2V0ID0gJChwYXJhbS5jdXJyZW50VGFyZ2V0KSwKICAgICAgICAgICAgICAgICAgICBmYWNldEFycmF5ID0gdGhpcy5tb2RlbC5nZXQoJ2ZhY2V0QXJyYXknKSwKICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzID0gdGhpcy5tb2RlbC5nZXQoJ2RhdGFQcm9wZXJ0aWVzJyksCiAgICAgICAgICAgICAgICAgICAgZmFjZXRDbG9zZSA9IHRoaXMuJGVsLmZpbmQoJy5mYWNldC1oZWFkaW5nID4gc3BhbicpLAogICAgICAgICAgICAgICAgICAgIGZhY2V0R3JvdXAgPSBjdXJyZW50RmFjZXQucGFyZW50cygnLmNvbXBvbmVudC1jb250ZW50JykuZmluZCgnLmZhY2V0LXNlYXJjaC1maWx0ZXInKSwKICAgICAgICAgICAgICAgICAgICBmYWNldE5hbWUgPSBwcm9wZXJ0aWVzLmYudG9Mb3dlckNhc2UoKSwKICAgICAgICAgICAgICAgICAgICBmYWNldERhdGFWYWx1ZSA9IGN1cnJlbnRGYWNldC5kYXRhKCdmYWNldHZhbHVlJyksCiAgICAgICAgICAgICAgICAgICAgZmFjZXRWYWx1ZSA9IHR5cGVvZiBmYWNldERhdGFWYWx1ZSAhPT0gInVuZGVmaW5lZCIgPyBkZWNvZGVVUklDb21wb25lbnQoZmFjZXREYXRhVmFsdWUpIDogZmFjZXREYXRhVmFsdWUsCiAgICAgICAgICAgICAgICAgICAgc2lnID0gdGhpcy5tb2RlbC5nZXQoJ3NpZycpLAogICAgICAgICAgICAgICAgICAgIGluZGV4LAogICAgICAgICAgICAgICAgICAgIGhhc2ggPSB7fSwKICAgICAgICAgICAgICAgICAgICBpOwoKICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzLm11bHRpKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGZhY2V0VmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRGYWNldC5pcygnOm5vdCguYWN0aXZlLWZhY2V0KScpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWNldEFycmF5LnB1c2goZmFjZXRWYWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEFjdGl2ZUZhY2V0KGZhY2V0TmFtZSwgZmFjZXRWYWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50RmFjZXQucmVtb3ZlQ2xhc3MoJ2FjdGl2ZS1mYWNldCcpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRGYWNldC5maW5kKCdbdHlwZT1jaGVja2JveF0nKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEZhY2V0LmZpbmQoJ1t0eXBlPWNoZWNrYm94XSArIGxhYmVsOmFmdGVyJykuY3NzKHsgJ2JhY2tncm91bmQnOiAnI2ZmZicgfSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBmYWNldEFycmF5LmluZGV4T2YoZmFjZXRWYWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhY2V0QXJyYXkuc3BsaWNlKGluZGV4LCAxKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmFjZXRBcnJheS5sZW5ndGggPT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhY2V0Q2xvc2UucmVtb3ZlQ2xhc3MoJ2hhcy1hY3RpdmUtZmFjZXQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLnNldCh7IGZhY2V0QXJyYXk6IGZhY2V0QXJyYXkgfSk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAvL2lzIHRoZXJlIGFueSBiZXR0ZXIgd2F5IHRvIGNoZWNrIHdoYXQgYWN0aW9uIHN0YXJ0IG1ldGhvZD8KICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudEZhY2V0WzBdLnR5cGUgPT0gImJ1dHRvbiIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHNpZy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzaFtzaWdbaV1dID0gXy51bmlxKGZhY2V0QXJyYXksIGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGl0ZW0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuam9pbigifHwiKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBxdWVyeU1vZGVsLnVwZGF0ZUhhc2goaGFzaCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZiAoZmFjZXRWYWx1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2lnLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNoW3NpZ1tpXV0gPSBmYWNldFZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGZhY2V0R3JvdXAuZGF0YSgnYWN0aXZlLWZhY2V0JywgaGFzaCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0QWN0aXZlRmFjZXQoZmFjZXROYW1lLCBmYWNldFZhbHVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlNb2RlbC51cGRhdGVIYXNoKGhhc2gpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICogU2V0cyBkZWZhdWx0IHZhbHVlcyBmb3IgU2VhcmNoIFJlc3VsdCBGaWx0ZXIgYW5kIHVwZGF0ZXMgaGFzaCBhY2NvcmRpbmdseQogICAgICAgICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2dCBFdmVudCBvYmplY3QKICAgICAgICAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmZhY2V0UmVzdWx0c0ZpbHRlci5GYWNldFJlc3VsdHNGaWx0ZXJWaWV3CiAgICAgICAgICAgICogQGFsaWFzIG1vZHVsZTpmYWNldFJlc3VsdHNGaWx0ZXIuRmFjZXRSZXN1bHRzRmlsdGVyVmlldyNyZW1vdmVGYWNldAogICAgICAgICAgICAqLwogICAgICAgICAgICByZW1vdmVGYWNldDogZnVuY3Rpb24gKGV2dCkgewogICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CgogICAgICAgICAgICAgICAgdmFyIGZhY2V0cyA9IHRoaXMuJGVsLAogICAgICAgICAgICAgICAgICAgIGZhY2V0Q2xvc2UgPSBmYWNldHMuZmluZCgnLmZhY2V0LWhlYWRpbmcgPiBzcGFuJyksCiAgICAgICAgICAgICAgICAgICAgZmFjZXRWYWx1ZXMgPSBmYWNldHMuZmluZCgnLmZhY2V0LXZhbHVlJyksCiAgICAgICAgICAgICAgICAgICAgc2lnID0gdGhpcy5tb2RlbC5nZXQoJ3NpZycpOwoKICAgICAgICAgICAgICAgIHF1ZXJ5TW9kZWwudXBkYXRlSGFzaCh0aGlzLnVwZGF0ZVNpZ25hdHVyZXNIYXNoKHNpZywgIiIsIHt9KSk7CgogICAgICAgICAgICAgICAgZmFjZXRDbG9zZS5yZW1vdmVDbGFzcygnaGFzLWFjdGl2ZS1mYWNldCcpOwoKICAgICAgICAgICAgICAgIF8uZWFjaChmYWNldFZhbHVlcywgZnVuY3Rpb24gKHNpbmdsZSkgewogICAgICAgICAgICAgICAgICAgIHZhciAkc2luZ2xlID0gJChzaW5nbGUpOwogICAgICAgICAgICAgICAgICAgIGlmICgkc2luZ2xlLmhhc0NsYXNzKCdhY3RpdmUtZmFjZXQnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAkc2luZ2xlLnJlbW92ZUNsYXNzKCdhY3RpdmUtZmFjZXQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgJHNpbmdsZS5maW5kKCdbdHlwZT1jaGVja2JveF0nKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpOwogICAgICAgICAgICAgICAgICAgICAgICAkc2luZ2xlLmZpbmQoJ1t0eXBlPWNoZWNrYm94XSArIGxhYmVsOmFmdGVyJykuY3NzKHsgJ2JhY2tncm91bmQnOiAnI2ZmZicgfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5zZXQoeyBmYWNldEFycmF5OiBbXSB9KTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICogUmVuZGVycyB2aWV3CiAgICAgICAgICAgICogQG1lbWJlcm9mIG1vZHVsZTpmYWNldFJlc3VsdHNGaWx0ZXIuRmFjZXRSZXN1bHRzRmlsdGVyVmlldwogICAgICAgICAgICAqIEBhbGlhcyBtb2R1bGU6ZmFjZXRSZXN1bHRzRmlsdGVyLkZhY2V0UmVzdWx0c0ZpbHRlclZpZXcjcmVuZGVyCiAgICAgICAgICAgICovCiAgICAgICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdmFyIGluc3QgPSB0aGlzLAogICAgICAgICAgICAgICAgICAgIHJlc3VsdERhdGEgPSB0aGlzLm1vZGVsLmdldCgicmVzdWx0RGF0YSIpLAogICAgICAgICAgICAgICAgICAgIGZhY2V0Q2xvc2UgPSB0aGlzLiRlbC5maW5kKCcuZmFjZXQtaGVhZGluZyA+IHNwYW4nKSwKICAgICAgICAgICAgICAgICAgICBmYWNldE5hbWVzID0gdGhpcy5tb2RlbC5nZXQoJ2RhdGFQcm9wZXJ0aWVzJykuZi5zcGxpdCgnfCcpLAogICAgICAgICAgICAgICAgICAgIGZhY2V0QXJyYXkgPSB0aGlzLm1vZGVsLmdldCgnZmFjZXRBcnJheScpLAogICAgICAgICAgICAgICAgICAgIGVtcHR5VmFsdWVUZXh0ID0gdGhpcy5tb2RlbC5nZXQoJ2RhdGFQcm9wZXJ0aWVzJykuZW1wdHlWYWx1ZVRleHQsCiAgICAgICAgICAgICAgICAgICAgaGlnaGxpZ2h0VGhyZXNob2xkID0gdGhpcy5tb2RlbC5nZXQoJ2RhdGFQcm9wZXJ0aWVzJykuaGlnaGxpZ2h0VGhyZXNob2xkLAogICAgICAgICAgICAgICAgICAgIHNob3dMZXNzVGV4dCA9IHRoaXMubW9kZWwuZ2V0KCdkYXRhUHJvcGVydGllcycpLnNob3dMZXNzVGV4dCwKICAgICAgICAgICAgICAgICAgICBzaG93TW9yZVRleHQgPSB0aGlzLm1vZGVsLmdldCgnZGF0YVByb3BlcnRpZXMnKS5zaG93TW9yZVRleHQsCiAgICAgICAgICAgICAgICAgICAgaGlnaGxpZ2h0QmVoYXZpb3VyID0gcGFyc2VJbnQodGhpcy5tb2RlbC5nZXQoJ2RhdGFQcm9wZXJ0aWVzJykuaGlnaGxpZ2h0QmVoYXZpb3VyKSwKICAgICAgICAgICAgICAgICAgICBzaG93QWxsRmFjZXRzID0gdGhpcy5tb2RlbC5nZXQoJ3Nob3dBbGxGYWNldHMnKSwKICAgICAgICAgICAgICAgICAgICBoYXNoID0gcXVlcnlNb2RlbC5wYXJzZUhhc2hQYXJhbWV0ZXJzKHdpbmRvdy5sb2NhdGlvbi5oYXNoKSwKICAgICAgICAgICAgICAgICAgICBzaWcgPSB0aGlzLm1vZGVsLmdldCgnc2lnJyksCiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUsIGZhY2V0TmFtZSwgdGVtcGxhdGVSZXN1bHQ7CgogICAgICAgICAgICAgICAgLy9jaGVja3MgaWYgcGFnZSBpcyBvcGVuZWQgZnJvbSBkaXNjIC0gaWYgeWVzIHRoZW4gd2UgYXJlIGluIENyZWF0aXZlIEV4Y2hhbmdlIG1vZGUKICAgICAgICAgICAgICAgIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZi5zdGFydHNXaXRoKCJmaWxlOi8vIikpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0aGlzLm1hbmFnZVZpc2liaWxpdHlCeURhdGEodGhpcy4kZWwsIHJlc3VsdERhdGEpCiAgICAgICAgICAgICAgICBpZiAocmVzdWx0RGF0YSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGluc3QubW9kZWwuZ2V0KCdkYXRhUHJvcGVydGllcycpLm11bHRpID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlID0gXy50ZW1wbGF0ZShpbnN0Lm1vZGVsLmdldCgidGVtcGxhdGVNdWx0aSIpKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZSA9IF8udGVtcGxhdGUoaW5zdC5tb2RlbC5nZXQoInRlbXBsYXRlIikpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVJlc3VsdCA9IHRlbXBsYXRlKHsKICAgICAgICAgICAgICAgICAgICAgICAgZmFjZXQ6IHJlc3VsdERhdGEsIGFjdGl2ZTogZmFjZXRBcnJheSwgZW1wdHlUZXh0OiBlbXB0eVZhbHVlVGV4dCwgc2hvd0xlc3NUZXh0OiBzaG93TGVzc1RleHQsCiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dNb3JlVGV4dDogc2hvd01vcmVUZXh0LCBoaWdobGlnaHRCZWhhdmlvdXI6IGhpZ2hsaWdodEJlaGF2aW91ciwgc2hvd0FsbEZhY2V0czogc2hvd0FsbEZhY2V0cywKICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0c0NvdW50OiByZXN1bHREYXRhLlZhbHVlcyA/IHJlc3VsdERhdGEuVmFsdWVzLmxlbmd0aCA6IC0xLAogICAgICAgICAgICAgICAgICAgICAgICBzYW5pdGl6ZTogWEEuc2VjdXJpdHkuc2FuaXRpemUKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpbnN0LiRlbC5maW5kKCIuY29udGVudENvbnRhaW5lciIpLmh0bWwodGVtcGxhdGVSZXN1bHQpOwoKICAgICAgICAgICAgICAgIC8vY2hlY2tzIHVybCBoYXNoIGZvciBmYWNldHMgYW5kIHJ1bnMgc2V0QWN0aXZlRmFjZXQgbWV0aG9kIGZvciBlYWNoIGZhY2V0IGZpbHRlcgogICAgICAgICAgICAgICAgXy5lYWNoKGZhY2V0TmFtZXMsIGZ1bmN0aW9uICh2YWwpIHsKICAgICAgICAgICAgICAgICAgICBmYWNldE5hbWUgPSB2YWwudG9Mb3dlckNhc2UoKTsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpZy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWpRdWVyeS5pc0VtcHR5T2JqZWN0KF8ucGljayhoYXNoLCBzaWcpKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlcyA9IF8udmFsdWVzKF8ucGljayhoYXNoLCBzaWcpKVswXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0LnNldEFjdGl2ZUZhY2V0KGZhY2V0TmFtZSwgdmFsdWVzKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9JZiB0aGlzIHJlbmRlcmluZyBpcyBzdXBwb3J0aW5nIG11bHRpcGxlIHNpZ25hdHVyZXMsIHdlIHdpbGwgbWFyayBhY3RpdmUgZmFjZXQgb25jZS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAvL2hpZ2hsaWdodHMgZmFjZXRzIGNvdW50IGdyZWF0ZXIgdGhhbiBjaG9zZW4gdGhyZXNob2xkCiAgICAgICAgICAgICAgICBpZiAoaGlnaGxpZ2h0VGhyZXNob2xkKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVUaHJlc2hvbGQoaGlnaGxpZ2h0VGhyZXNob2xkKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvL2lmIG5vIGZhY2V0IGlzIHNlbGVjdGVkLCByZW1vdmUgcHJldmlvdXNseSBoaWdobGlnaHRlZCBjcm9zcyBpY29uICh3aGlsZSBiYWNrIGJ1dHRvbikKICAgICAgICAgICAgICAgIGlmICh0aGlzLm1vZGVsLmdldCgiZmFjZXRBcnJheSIpLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIGZhY2V0Q2xvc2UucmVtb3ZlQ2xhc3MoJ2hhcy1hY3RpdmUtZmFjZXQnKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZmFjZXRDbG9zZS5hZGRDbGFzcygnaGFzLWFjdGl2ZS1mYWNldCcpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAvKioKICAgICAgICAgICAgKiBNYW5hZ2VzIHNlYXJjaCByZXN1bHQgZmlsdGVyIGFjdGl2ZSBzdGF0ZQogICAgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBmYWNldEdyb3VwTmFtZSBmYWNldCBuYW1lCiAgICAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGZhY2V0VmFsdWVOYW1lIGZhY2V0IHZhbHVlCiAgICAgICAgICAgICogQG1lbWJlcm9mIG1vZHVsZTpmYWNldFJlc3VsdHNGaWx0ZXIuRmFjZXRSZXN1bHRzRmlsdGVyVmlldwogICAgICAgICAgICAqIEBhbGlhcyBtb2R1bGU6ZmFjZXRSZXN1bHRzRmlsdGVyLkZhY2V0UmVzdWx0c0ZpbHRlclZpZXcjc2V0QWN0aXZlRmFjZXQKICAgICAgICAgICAgKi8KICAgICAgICAgICAgc2V0QWN0aXZlRmFjZXQ6IGZ1bmN0aW9uIChmYWNldEdyb3VwTmFtZSwgZmFjZXRWYWx1ZU5hbWUpIHsKICAgICAgICAgICAgICAgIHZhciBwcm9wZXJ0aWVzID0gdGhpcy5tb2RlbC5nZXQoJ2RhdGFQcm9wZXJ0aWVzJyksCiAgICAgICAgICAgICAgICAgICAgZmFjZXRDaGlsZHJlbiA9IHRoaXMuJGVsLmZpbmQoJ3BbZGF0YS1mYWNldHZhbHVlXScpLAogICAgICAgICAgICAgICAgICAgIGZhY2V0Q2xvc2UgPSB0aGlzLiRlbC5maW5kKCcuZmFjZXQtaGVhZGluZyA+IHNwYW4nKSwKICAgICAgICAgICAgICAgICAgICBpbnN0ID0gdGhpcywKICAgICAgICAgICAgICAgICAgICBmYWNldFZhbHVlLAogICAgICAgICAgICAgICAgICAgIHZhbHVlczsKCiAgICAgICAgICAgICAgICBmYWNldFZhbHVlTmFtZSA9IGZhY2V0VmFsdWVOYW1lLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKTsKICAgICAgICAgICAgICAgIGZhY2V0VmFsdWUgPSB0aGlzLiRlbC5maW5kKCJbZGF0YS1mYWNldHZhbHVlXSIpLmZpbHRlcihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCgkKHRoaXMpLmF0dHIoImRhdGEtZmFjZXR2YWx1ZSIpKS50b0xvd2VyQ2FzZSgpID09PSBkZWNvZGVVUklDb21wb25lbnQoZmFjZXRWYWx1ZU5hbWUpOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAoZmFjZXRWYWx1ZU5hbWUpICE9PSAidW5kZWZpbmVkIiAmJiBmYWNldFZhbHVlTmFtZSAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlcyA9IGZhY2V0VmFsdWVOYW1lLnNwbGl0KCJ8fCIpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKHZhbHVlcy5sZW5ndGggPiAxKSB7CiAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllcy5tdWx0aSA9IHRydWU7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMubXVsdGkpIHsKICAgICAgICAgICAgICAgICAgICAvL211bHRpIHNlbGVjdGlvbiBmYWNldCBzZWFyY2ggcmVzdWx0cwogICAgICAgICAgICAgICAgICAgIF8uZWFjaChmYWNldENoaWxkcmVuLCBmdW5jdGlvbiAodmFsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZXMubGVuZ3RoID4gMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFjZXRWYWx1ZSA9IGluc3QuJGVsLmZpbmQoIltkYXRhLWZhY2V0dmFsdWVdIikuZmlsdGVyKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCgkKHRoaXMpLmF0dHIoJ2RhdGEtZmFjZXR2YWx1ZScpKS50b0xvd2VyQ2FzZSgpID09PSBkZWNvZGVVUklDb21wb25lbnQodmFsdWVzW2ldKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsID09PSBmYWNldFZhbHVlWzBdICYmIGluc3QubW9kZWwuZ2V0KCJmYWNldEFycmF5IikuaW5jbHVkZXModmFsLmRhdGFzZXQuZmFjZXR2YWx1ZSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh2YWwpLmFkZENsYXNzKCdhY3RpdmUtZmFjZXQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh2YWwpLmZpbmQoJ1t0eXBlPWNoZWNrYm94XScpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWwgPT09IGZhY2V0VmFsdWVbMF0gJiYgaW5zdC5tb2RlbC5nZXQoImZhY2V0QXJyYXkiKS5pbmNsdWRlcyhkZWNvZGVVUklDb21wb25lbnQodmFsLmRhdGFzZXQuZmFjZXR2YWx1ZSkpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHZhbCkuYWRkQ2xhc3MoJ2FjdGl2ZS1mYWNldCcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh2YWwpLmZpbmQoJ1t0eXBlPWNoZWNrYm94XScpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAvL3NpbmdsZSBzZWxlY3Rpb24gZmFjZXQgc2VhcmNoIHJlc3VsdHMgZmlsdGVyIGFsbG93cyBvbmx5IG9uZSBmYWNldCB0eXBlIHRvIGJlIHNlbGVjdGVkCiAgICAgICAgICAgICAgICAgICAgXy5lYWNoKGZhY2V0Q2hpbGRyZW4sIGZ1bmN0aW9uICh2YWwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbCAhPT0gZmFjZXRWYWx1ZVswXSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh2YWwpLnJlbW92ZUNsYXNzKCdhY3RpdmUtZmFjZXQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodmFsKS5maW5kKCdbdHlwZT1jaGVja2JveF0nKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh2YWwpLmZpbmQoJ1t0eXBlPWNoZWNrYm94XSArIGxhYmVsOmFmdGVyJykuY3NzKHsgJ2JhY2tncm91bmQnOiAnI2ZmZicgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHZhbCkuYWRkQ2xhc3MoJ2FjdGl2ZS1mYWNldCcpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy9hZGRzIGFjdGl2ZSBjbGFzcyB0byBncm91cCBjbG9zZSBidXR0b24KICAgICAgICAgICAgICAgIGZhY2V0Q2xvc2UuYWRkQ2xhc3MoJ2hhcy1hY3RpdmUtZmFjZXQnKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICogTWFuYWdlcyBzZWFyY2ggcmVzdWx0IGZpbHRlciBoaWdobGlnaHQgb2YgdGhyZXNob2xkCiAgICAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IGhpZ2hsaWdodFRocmVzaG9sZCB2YWx1ZSBvZiB0aHJlc2hvbGQgaGlnaGxpZ2h0CiAgICAgICAgICAgICogQG1lbWJlcm9mIG1vZHVsZTpmYWNldFJlc3VsdHNGaWx0ZXIuRmFjZXRSZXN1bHRzRmlsdGVyVmlldwogICAgICAgICAgICAqIEBhbGlhcyBtb2R1bGU6ZmFjZXRSZXN1bHRzRmlsdGVyLkZhY2V0UmVzdWx0c0ZpbHRlclZpZXcjaGFuZGxlVGhyZXNob2xkCiAgICAgICAgICAgICovCiAgICAgICAgICAgIGhhbmRsZVRocmVzaG9sZDogZnVuY3Rpb24gKGhpZ2hsaWdodFRocmVzaG9sZCkgewogICAgICAgICAgICAgICAgdmFyIGZhY2V0cyA9IHRoaXMuJGVsLmZpbmQoJy5mYWNldC1zZWFyY2gtZmlsdGVyJykuY2hpbGRyZW4oJ3AnKTsKCiAgICAgICAgICAgICAgICBfLmVhY2goZmFjZXRzLCBmdW5jdGlvbiAoc2luZ2xlKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyICRmYWNldCA9ICQoc2luZ2xlKSwKICAgICAgICAgICAgICAgICAgICAgICAgJGZhY2V0Q291bnQgPSAkZmFjZXQuZmluZCgnLmZhY2V0LWNvdW50JyksCiAgICAgICAgICAgICAgICAgICAgICAgIGZhY2V0Q291bnQgPSAkZmFjZXRDb3VudC5kYXRhKCdmYWNldGNvdW50Jyk7CgogICAgICAgICAgICAgICAgICAgIGlmIChmYWNldENvdW50ID4gaGlnaGxpZ2h0VGhyZXNob2xkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRmYWNldENvdW50LmFkZENsYXNzKCdoaWdobGlnaHRlZCcpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAvKioKICAgICogRm9yIGVhY2ggc2VhcmNoIHJlc3VsdCBjb21wb25lbnQgb24gYSBwYWdlIGNyZWF0ZXMgaW5zdGFuY2Ugb2YKICAgICogWyJGYWNldFJlc3VsdHNGaWx0ZXJNb2RlbCJde0BsaW5rIG1vZHVsZTpmYWNldFJlc3VsdHNGaWx0ZXIuRmFjZXRSZXN1bHRzRmlsdGVyTW9kZWx9IGFuZAogICAgKiBbIkZhY2V0UmVzdWx0c0ZpbHRlclZpZXciXXtAbGluayBtb2R1bGU6ZmFjZXRSZXN1bHRzRmlsdGVyLkZhY2V0UmVzdWx0c0ZpbHRlclZpZXd9CiAgICAqIEBtZW1iZXJPZiBtb2R1bGU6ZmFjZXRSZXN1bHRzRmlsdGVyCiAgICAqIEBhbGlhcyBtb2R1bGU6ZmFjZXRSZXN1bHRzRmlsdGVyLmluaXQKICAgICovCiAgICBhcGkuaW5pdCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICBpZiAoJCgiYm9keSIpLmhhc0NsYXNzKCJvbi1wYWdlLWVkaXRvciIpKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHF1ZXJ5TW9kZWwgPSBYQS5jb21wb25lbnQuc2VhcmNoLnF1ZXJ5OwogICAgICAgIGFwaU1vZGVsID0gWEEuY29tcG9uZW50LnNlYXJjaC5hamF4OwogICAgICAgIHVybEhlbHBlck1vZGVsID0gWEEuY29tcG9uZW50LnNlYXJjaC51cmw7CgogICAgICAgIHZhciBmYWNldFJlc3VsdHNGaWx0ZXJMaXN0ID0gJCgiLmZhY2V0LXNpbmdsZS1zZWxlY3Rpb24tbGlzdDpub3QoLmluaXRpYWxpemVkKSIpOwoKICAgICAgICBfLmVhY2goZmFjZXRSZXN1bHRzRmlsdGVyTGlzdCwgZnVuY3Rpb24gKGVsZW0pIHsKICAgICAgICAgICAgdmFyICRlbCA9ICQoZWxlbSksCiAgICAgICAgICAgICAgICBtb2RlbCA9IG5ldyBGYWNldFJlc3VsdHNGaWx0ZXJNb2RlbCgpLAogICAgICAgICAgICAgICAgdmlldyA9IG5ldyBGYWNldFJlc3VsdHNGaWx0ZXJWaWV3KHsgZWw6ICRlbCwgbW9kZWw6IG1vZGVsIH0pOwoKICAgICAgICAgICAgJGVsLmFkZENsYXNzKCJpbml0aWFsaXplZCIpOwogICAgICAgIH0pOwogICAgfTsKICAgIC8qKgogICAgKiBSZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0IGZhY2V0IGNvbXBvbmVudAogICAgKiBAbWVtYmVyT2YgbW9kdWxlOmZhY2V0UmVzdWx0c0ZpbHRlcgogICAgKiBAYWxpYXMgbW9kdWxlOmZhY2V0UmVzdWx0c0ZpbHRlci5nZXRGYWNldERhdGFSZXF1ZXN0SW5mbwogICAgKiBAcmV0dXJucyB7QXJyYXk8RmFjZXREYXRhUmVxdWVzdEluZm8+fSBmYWNldCBkYXRhIG5lZWRlZCBmb3IgcmVxdWVzdAogICAgKi8KICAgIGFwaS5nZXRGYWNldERhdGFSZXF1ZXN0SW5mbyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgZmFjZXRMaXN0ID0gJCgiLmZhY2V0LXNpbmdsZS1zZWxlY3Rpb24tbGlzdCIpLAogICAgICAgICAgICByZXN1bHQgPSBbXTsKCiAgICAgICAgXy5lYWNoKGZhY2V0TGlzdCwgZnVuY3Rpb24gKGVsZW0pIHsKICAgICAgICAgICAgdmFyIHByb3BlcnRpZXMgPSAkKGVsZW0pLmRhdGEoKS5wcm9wZXJ0aWVzLAogICAgICAgICAgICAgICAgc2lnbmF0dXJlcyA9IHByb3BlcnRpZXMuc2VhcmNoUmVzdWx0c1NpZ25hdHVyZS5zcGxpdCgnLCcpLAogICAgICAgICAgICAgICAgaTsKCiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzaWduYXR1cmVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgc2lnbmF0dXJlOiBzaWduYXR1cmVzW2ldID09PSBudWxsID8gIiIgOiBzaWduYXR1cmVzW2ldLAogICAgICAgICAgICAgICAgICAgIGZhY2V0TmFtZTogcHJvcGVydGllcy5mLAogICAgICAgICAgICAgICAgICAgIGVuZHBvaW50OiBwcm9wZXJ0aWVzLmVuZHBvaW50LAogICAgICAgICAgICAgICAgICAgIHNob3dNb3JlVGV4dDogcHJvcGVydGllcy5zaG93TW9yZVRleHQsCiAgICAgICAgICAgICAgICAgICAgc2hvd0xlc3NUZXh0OiBwcm9wZXJ0aWVzLnNob3dMZXNzVGV4dCwKICAgICAgICAgICAgICAgICAgICBoaWdobGlnaHRCZWhhdmlvdXI6IHByb3BlcnRpZXMuaGlnaGxpZ2h0QmVoYXZpb3VyLAogICAgICAgICAgICAgICAgICAgIHM6IHByb3BlcnRpZXMucywKICAgICAgICAgICAgICAgICAgICBmaWx0ZXJXaXRob3V0TWU6ICFwcm9wZXJ0aWVzLmNvbGxhcHNlT25TZWxlY3Rpb24KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9OwoKICAgIHJldHVybiBhcGk7Cgp9KGpRdWVyeSwgZG9jdW1lbnQpKTsKClhBLnJlZ2lzdGVyKCdmYWNldFJlc3VsdHNGaWx0ZXInLCBYQS5jb21wb25lbnQuc2VhcmNoLmZhY2V0LnJlc3VsdHNmaWx0ZXIpOw==
- ID: "6954b7c7-2487-423f-8600-436cb3b6dc0e"
  Hint: Size
  Value: 27784
- ID: "6f47a0a5-9c94-4b48-abeb-42d38def6054"
  Hint: Mime Type
  Value: "application/x-javascript"
- ID: "ba3f86a2-4a1c-4d78-b63d-91c2779c1b5e"
  Hint: __Sortorder
  Value: 1750
- ID: "c06867fe-9a43-4c7d-b739-48780492d06f"
  Hint: Extension
  Value: js
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20160728T134138Z
    - ID: "5dd74568-4d4b-44c1-b513-0af5f4cda34f"
      Hint: __Created by
      Value: |
        default\Anonymous
    - ID: "8cdc337e-a112-42fb-bbb4-4143751e123f"
      Hint: __Revision
      Value: "62273c5e-d9e2-4091-87df-72ff786dc26f"
