---
ID: "435755fe-cc7c-45ab-8a7f-c54f089ea131"
Parent: "dfcbfa5a-2e37-418a-adb7-f411ecae89a9"
Template: "962b53c4-f93b-4df9-9821-415c867b8903"
Path: "/sitecore/media library/Base Themes/SearchTheme/Scripts/component-search-page-selector"
SharedFields:
- ID: "06d5295c-ed2f-4a54-9bf2-26228d113318"
  Hint: __Icon
  Value: "-/media/435755FECC7C45AB8A7FC54F089EA131.ashx?h=16&thn=1&w=16"
- ID: "40e50ed9-ba07-4702-992e-a912738d32dc"
  Hint: Blob
  BlobID: "435755fe-cc7c-45ab-8a7f-c54f089ea131"
  Value: LyoqDQogKiBGYWNldCBwYWdlIHNlbGVjdG9yIGNvbXBvbmVudCBmdW5jdGlvbmFsaXR5DQogKiBAbW9kdWxlIHNlYXJjaFBhZ2VTZWxlY3Rvcg0KICogQHBhcmFtICB7alF1ZXJ5fSAkIEluc3RhbmNlIG9mIGpRdWVyeQ0KICogQHBhcmFtICB7RG9jdW1lbnR9IGRvY3VtZW50IGRvbSBkb2N1bWVudCBvYmplY3QNCiAqIEByZXR1cm4ge09iamVjdH0gbGlzdCBvZiBtZXRob2RzIGZvciB3b3JraW5nIHdpdGggY29tcG9uZW50IHBhZ2Ugc2VsZWN0b3INCiovDQpYQS5jb21wb25lbnQuc2VhcmNoLnBhZ2VTZWxlY3RvciA9IChmdW5jdGlvbiAoJCwgZG9jdW1lbnQpIHsNCiAgICAvKioNCiAgICAqIFRoaXMgb2JqZWN0IHN0b3JlcyBhbGwgcHVibGljIGFwaSBtZXRob2RzDQogICAgKiBAdHlwZSB7T2JqZWN0LjxNZXRob2RzPn0NCiAgICAqIEBtZW1iZXJPZiBtb2R1bGU6c2VhcmNoUGFnZVNlbGVjdG9yDQogICAgKi8NCiAgICB2YXIgYXBpID0ge30sDQogICAgICAgIHF1ZXJ5TW9kZWw7DQogICAgZmFjZXROYW1lID0gImUiOw0KICAgIC8qKg0KICAgICogQG5hbWUgbW9kdWxlOnNlYXJjaFBhZ2VTZWxlY3Rvci5TZWFyY2hQYWdlU2VsZWN0b3JNb2RlbA0KICAgICogQGNvbnN0cnVjdG9yDQogICAgKiBAYXVnbWVudHMgQmFja2JvbmUuTW9kZWwNCiAgICAqLw0KICAgIHZhciBTZWFyY2hQYWdlU2VsZWN0b3JNb2RlbCA9IEJhY2tib25lLk1vZGVsLmV4dGVuZCgNCiAgICAgICAgLyoqIEBsZW5kcyBtb2R1bGU6c2VhcmNoUGFnZVNlbGVjdG9yLlNlYXJjaFBhZ2VTZWxlY3Rvck1vZGVsLnByb3RvdHlwZSAqKi8NCiAgICAgICAgew0KICAgICAgICAgICAgLyoqDQogICAgICAgICAgICAqIERlZmF1bHQgbW9kZWwgb3B0aW9ucw0KICAgICAgICAgICAgKiBAZGVmYXVsdA0KICAgICAgICAgICAgKi8NCiAgICAgICAgICAgIGRlZmF1bHRzOiB7DQogICAgICAgICAgICAgICAgZGF0YVByb3BlcnRpZXM6IHt9LA0KICAgICAgICAgICAgICAgIHJlc3VsdHNDb3VudDogMCwNCiAgICAgICAgICAgICAgICBvZmZzZXQ6IDAsDQogICAgICAgICAgICAgICAgc2VsZWN0ZWRWYWx1ZTogMSwNCiAgICAgICAgICAgICAgICBwYWdlU2l6ZTogMCwNCiAgICAgICAgICAgICAgICByZXBlYXRSZXF1ZXN0OiBmYWxzZSwNCiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogIjx1bCBjbGFzcz0ncGFnZS1zZWxlY3Rvci1saXN0Jz4gIiArDQogICAgICAgICAgICAgICAgICAgICI8bGkgY2xhc3M9J3BhZ2Utc2VsZWN0b3ItaXRlbS1maXJzdCc+PGEgaHJlZj0nIyc+PCU9IGRhdGEuZmlyc3QgJT48L2E+PC9saT4iICsNCiAgICAgICAgICAgICAgICAgICAgIjxsaSBjbGFzcz0ncGFnZS1zZWxlY3Rvci1pdGVtLXByZXZpb3VzJz48YSBocmVmPScjJz48JT0gZGF0YS5wcmV2aW91cyAlPjwvYT48L2xpPiIgKw0KICAgICAgICAgICAgICAgICAgICAiPCUgdmFyIGJlZm9yZVBhZ2UgPSAwOyAlPiIgKw0KICAgICAgICAgICAgICAgICAgICAiPCUgXy5lYWNoKGRhdGEucGFnZXMsIGZ1bmN0aW9uKHBhZ2UpeyAlPiIgKw0KICAgICAgICAgICAgICAgICAgICAiPCUgaWYoKGJlZm9yZVBhZ2UrMSkgIT0gcGFnZS5udW1iZXIpeyAlPiIgKw0KICAgICAgICAgICAgICAgICAgICAiPGxpPjxzcGFuIGNsYXNzPSdwYWdlLXNlbGVjdG9yLW1vcmUnPi4uLjwvc3Bhbj48L2xpPiIgKw0KICAgICAgICAgICAgICAgICAgICAiPCUgfSAlPiIgKw0KICAgICAgICAgICAgICAgICAgICAiPCUgYmVmb3JlUGFnZSA9IHBhZ2UubnVtYmVyOyAlPiIgKw0KICAgICAgICAgICAgICAgICAgICAiPCUgaWYoZGF0YS5zZWxlY3RlZFZhbHVlID09PSBwYWdlLm51bWJlcil7ICU+IiArDQogICAgICAgICAgICAgICAgICAgICI8JSBhY3RpdmUgPSAnYWN0aXZlJzsgJT4iICsNCiAgICAgICAgICAgICAgICAgICAgIjwlIH1lbHNlIHsgYWN0aXZlID0gJycgfSAlPiIgKw0KICAgICAgICAgICAgICAgICAgICAiPGxpPjxhIGNsYXNzPSdwYWdlLXNlbGVjdG9yLWl0ZW0tbGluayA8JT0gYWN0aXZlICU+JyBkYXRhLW9mZnNldD0nPCU9IHBhZ2Uub2Zmc2V0ICU+JyBkYXRhLWl0ZW1OdW1iZXI9JzwlPSBwYWdlLm51bWJlciAlPicgaHJlZj0nIyc+PCU9IHBhZ2UubnVtYmVyICU+PC9hPjwvbGk+IiArDQogICAgICAgICAgICAgICAgICAgICI8JSB9KTsgJT4iICsNCiAgICAgICAgICAgICAgICAgICAgIjxsaSBjbGFzcz0ncGFnZS1zZWxlY3Rvci1pdGVtLW5leHQnPjxhIGhyZWY9JyMnPjwlPSBkYXRhLm5leHQgJT48L2E+PC9saT4iICsNCiAgICAgICAgICAgICAgICAgICAgIjxsaSBjbGFzcz0ncGFnZS1zZWxlY3Rvci1pdGVtLWxhc3QnPjxhIGhyZWY9JyMnPjwlPSBkYXRhLmxhc3QgJT48L2E+PC9saT4iICsNCiAgICAgICAgICAgICAgICAgICAgIjwvdWw+IiwNCiAgICAgICAgICAgICAgICBzaWc6IFtdLA0KICAgICAgICAgICAgICAgIHRpbWVTdGFtcDogbmV3IERhdGUoKS5nZXRUaW1lKCkNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgLyoqDQogICAgICogQG5hbWUgbW9kdWxlOnNlYXJjaFBhZ2VTZWxlY3Rvci5TZWFyY2hQYWdlU2VsZWN0b3JWaWV3DQogICAgICogQGNvbnN0cnVjdG9yDQogICAgICogQGF1Z21lbnRzIEJhY2tib25lLlZpZXcNCiAgICAgKi8NCiAgICB2YXIgU2VhcmNoUGFnZVNlbGVjdG9yVmlldyA9IFhBLmNvbXBvbmVudC5zZWFyY2guYmFzZVZpZXcuZXh0ZW5kKA0KICAgICAgICAvKiogQGxlbmRzIG1vZHVsZTpzZWFyY2hQYWdlU2VsZWN0b3IuU2VhcmNoUGFnZVNlbGVjdG9yVmlldyAqKi8NCiAgICAgICAgew0KICAgICAgICAgICAgLyoqDQogICAgICAgICAgICogSW5pdGlhbGx5IHNldHMgZGF0YSB0byBtb2RlbCBhbmQgd2F0Y2hlcyBldmVudHMgb24gd2hpY2gNCiAgICAgICAgICAgKiB2aWV3IHNob3VsZCBiZSB1cGRhdGVkDQogICAgICAgICAgICogQGxpc3RlbnMgbW9kdWxlOnNlYXJjaFBhZ2VTZWxlY3Rvci5TZWFyY2hQYWdlU2VsZWN0b3JWaWV3fmV2ZW50OmNoYW5nZQ0KICAgICAgICAgICAqIEBsaXN0ZW5zIG1vZHVsZTpYQS5jb21wb25lbnQuc2VhcmNoLnZlbnR+ZXZlbnQ6cmVzdWx0cy1sb2FkZWQNCiAgICAgICAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOnNlYXJjaFBhZ2VTZWxlY3Rvci5TZWFyY2hQYWdlU2VsZWN0b3JWaWV3DQogICAgICAgICAgICogQGFsaWFzIG1vZHVsZTpzZWFyY2hQYWdlU2VsZWN0b3IuU2VhcmNoUGFnZVNlbGVjdG9yVmlldyNpbml0aWFsaXplDQogICAgICAgICAgICovDQogICAgICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgdmFyIGRhdGFQcm9wID0gdGhpcy4kZWwuZGF0YSgpOw0KDQogICAgICAgICAgICAgICAgaWYgKGRhdGFQcm9wLnByb3BlcnRpZXMuc2VhcmNoUmVzdWx0c1NpZ25hdHVyZSA9PT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICBkYXRhUHJvcC5wcm9wZXJ0aWVzLnNlYXJjaFJlc3VsdHNTaWduYXR1cmUgPSAiIjsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLnNldCgiZGF0YVByb3BlcnRpZXMiLCBkYXRhUHJvcCk7DQogICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5zZXQoInNpZyIsIHRoaXMudHJhbnNsYXRlU2lnbmF0dXJlcyhkYXRhUHJvcC5wcm9wZXJ0aWVzLnNlYXJjaFJlc3VsdHNTaWduYXR1cmUsIGZhY2V0TmFtZSkpOw0KICAgICAgICAgICAgICAgIHRoaXMubW9kZWwub24oImNoYW5nZSIsIHRoaXMucmVuZGVyLCB0aGlzKTsNCg0KICAgICAgICAgICAgICAgIFhBLmNvbXBvbmVudC5zZWFyY2gudmVudC5vbigicmVzdWx0cy1sb2FkZWQiLCB0aGlzLmhhbmRsZUxvYWRlZERhdGEuYmluZCh0aGlzKSk7DQoNCiAgICAgICAgICAgICAgICAvL2NoZWNrIHdoZXRoZXIgcGFnZSBpcyBvcGVuZWQgZnJvbSBkaXNjIC0gaWYgeWVzIHRoZW4gd2UgYXJlIGluIENyZWF0aXZlIEV4Y2hhbmdlIG1vZGUgYW5kIGxldHMgbW9jayBzb21lIGNvbnRlbnQNCiAgICAgICAgICAgICAgICBpZiAod2luZG93LmxvY2F0aW9uLmhyZWYuc3RhcnRzV2l0aCgiZmlsZTovLyIpKSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuc2V0KHsNCiAgICAgICAgICAgICAgICAgICAgICAgICJyZXN1bHRzQ291bnQiOiAxMCwNCiAgICAgICAgICAgICAgICAgICAgICAgICJwYWdlU2l6ZSI6IDIsDQogICAgICAgICAgICAgICAgICAgICAgICAic2VsZWN0ZWRWYWx1ZSI6IDINCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIC8qKg0KICAgICAgICAgICAgICogbGlzdCBvZiBldmVudHMgZm9yIEJhY2tib25lIFZpZXcNCiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6c2VhcmNoUGFnZVNlbGVjdG9yLlNlYXJjaFBhZ2VTZWxlY3RvclZpZXcNCiAgICAgICAgICAgICAqIEBhbGlhcyBtb2R1bGU6c2VhcmNoUGFnZVNlbGVjdG9yLlNlYXJjaFBhZ2VTZWxlY3RvclZpZXcjZXZlbnRzDQogICAgICAgICAgICAgKi8NCiAgICAgICAgICAgIGV2ZW50czogew0KICAgICAgICAgICAgICAgICdjbGljayAucGFnZS1zZWxlY3Rvci1pdGVtLWxpbmsnOiAidXBkYXRlU2VsZWN0ZWRWYWx1ZSIsDQogICAgICAgICAgICAgICAgJ2NsaWNrIC5wYWdlLXNlbGVjdG9yLWl0ZW0tZmlyc3QgYSc6ICJzaG93Rmlyc3RQYWdlIiwNCiAgICAgICAgICAgICAgICAnY2xpY2sgLnBhZ2Utc2VsZWN0b3ItaXRlbS1sYXN0IGEnOiAic2hvd0xhc3RQYWdlIiwNCiAgICAgICAgICAgICAgICAnY2xpY2sgLnBhZ2Utc2VsZWN0b3ItaXRlbS1wcmV2aW91cyBhJzogInNob3dQcmV2UGFnZSIsDQogICAgICAgICAgICAgICAgJ2NsaWNrIC5wYWdlLXNlbGVjdG9yLWl0ZW0tbmV4dCBhJzogInNob3dOZXh0UGFnZSINCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICAvKioNCiAgICAgICAgICAgICogVXBkYXRlcyBtb2RlbCB2YWx1ZXMgd2l0aCBzZWxlY3RlZFZhbHVlDQogICAgICAgICAgICAqIGFuZCBkYXRhIG9iamVjdCBmcm9tIHNlcnZlciByZXNwb25zZQ0KICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSBEYXRhIHRoYXQgY29udGFpbnMgY29tcG9uZW50IHByb3BlcnRpZXMNCiAgICAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHNlbGVjdGVkVmFsdWUgbnVtYmVyIG9mIHNlbGVjdGVkIHBhZ2UgDQogICAgICAgICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6c2VhcmNoUGFnZVNlbGVjdG9yLlNlYXJjaFBhZ2VTZWxlY3RvclZpZXcNCiAgICAgICAgICAgICogQGFsaWFzIG1vZHVsZTpzZWFyY2hQYWdlU2VsZWN0b3IuU2VhcmNoUGFnZVNlbGVjdG9yVmlldyN1cGRhdGVNb2RlbEFmdGVyU2VhcmNoDQogICAgICAgICAgICAqLw0KICAgICAgICAgICAgdXBkYXRlTW9kZWxBZnRlclNlYXJjaDogZnVuY3Rpb24gKGRhdGEsIHNlbGVjdGVkVmFsdWUpIHsNCiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLnNldCh7DQogICAgICAgICAgICAgICAgICAgICJwYWdlU2l6ZSI6IHBhcnNlSW50KGRhdGEucGFnZVNpemUpLA0KICAgICAgICAgICAgICAgICAgICAicmVzdWx0c0NvdW50IjogcGFyc2VJbnQoZGF0YS5kYXRhQ291bnQpLA0KICAgICAgICAgICAgICAgICAgICAib2Zmc2V0IjogcGFyc2VJbnQoZGF0YS5vZmZzZXQpLA0KICAgICAgICAgICAgICAgICAgICAic2VsZWN0ZWRWYWx1ZSI6IHBhcnNlSW50KHNlbGVjdGVkVmFsdWUpDQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5zZXQoInRpbWVTdGFtcCIsIG5ldyBEYXRlKCkuZ2V0VGltZSgpKTsNCiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnRDc3NDbGFzcyhkYXRhKTsNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICAvKioNCiAgICAgICAgICAgICogRnVuY3Rpb24gdGhhdCBiYXNlZCBvbiBzZWxlY3RlZCBjb21wb25lbnQgdmFsdWVzIHNldHMgY3NzIGNsYXNzDQogICAgICAgICAgICAqIHBhZ2Utc2VsZWN0b3ItZW1wdHkgb3IgcGFnZS1zZWxlY3Rvci1zaW5nbGUtcGFnZQ0KICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSBEYXRhIHRoYXQgY29udGFpbnMgY29tcG9uZW50IHByb3BlcnRpZXMNCiAgICAgICAgICAgICogQG1lbWJlck9mIG1vZHVsZTpzZWFyY2hQYWdlU2VsZWN0b3IuU2VhcmNoUGFnZVNlbGVjdG9yVmlldw0KICAgICAgICAgICAgKiBAYWxpYXMgbW9kdWxlOnNlYXJjaFBhZ2VTZWxlY3Rvci5TZWFyY2hQYWdlU2VsZWN0b3JWaWV3I3VwZGF0ZUVsZW1lbnRDc3NDbGFzcw0KICAgICAgICAgICAgKi8NCiAgICAgICAgICAgIHVwZGF0ZUVsZW1lbnRDc3NDbGFzczogZnVuY3Rpb24gKGRhdGEpIHsNCiAgICAgICAgICAgICAgICB0aGlzLmVsLmNsYXNzTGlzdC5yZW1vdmUoInBhZ2Utc2VsZWN0b3ItZW1wdHkiKQ0KICAgICAgICAgICAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LnJlbW92ZSgicGFnZS1zZWxlY3Rvci1zaW5nbGUtcGFnZSIpDQogICAgICAgICAgICAgICAgaWYgKGRhdGEuZGF0YUNvdW50ID09PSAwKSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LmFkZCgicGFnZS1zZWxlY3Rvci1lbXB0eSIpDQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhLnBhZ2VTaXplID49IGRhdGEuZGF0YUNvdW50IHx8IGRhdGEub2Zmc2V0ID4gZGF0YS5kYXRhQ291bnQpIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbC5jbGFzc0xpc3QuYWRkKCJwYWdlLXNlbGVjdG9yLXNpbmdsZS1wYWdlIikNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgLyoqDQogICAgICAgICAgICAqIFVwZGF0ZXMgaGFzaCBhY2NvcmRpbmcgdG8gY2hhbmdlZCBjb21wb25lbnQgdmFsdWUNCiAgICAgICAgICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgRXZlbnQgb2JqZWN0IHRoYXQgY29udGFpbnMgdGFyZ2V0IHdpdGggc2VsZWN0ZWQgY29tcG9uZW50IHZhbHVlDQogICAgICAgICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6c2VhcmNoUGFnZVNlbGVjdG9yLlNlYXJjaFBhZ2VTZWxlY3RvclZpZXcNCiAgICAgICAgICAgICogQGFsaWFzIG1vZHVsZTpzZWFyY2hQYWdlU2VsZWN0b3IuU2VhcmNoUGFnZVNlbGVjdG9yVmlldyN1cGRhdGVTZWxlY3RlZFZhbHVlDQogICAgICAgICAgICAqLw0KICAgICAgICAgICAgdXBkYXRlU2VsZWN0ZWRWYWx1ZTogZnVuY3Rpb24gKGV2ZW50KSB7DQogICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsNCg0KICAgICAgICAgICAgICAgIHZhciBzaWcgPSB0aGlzLm1vZGVsLmdldCgic2lnIiksDQogICAgICAgICAgICAgICAgICAgIGRhdGFQcm9wID0gJChldmVudC50YXJnZXQpLmRhdGEoKTsNCg0KICAgICAgICAgICAgICAgIHF1ZXJ5TW9kZWwudXBkYXRlSGFzaCh0aGlzLnVwZGF0ZVNpZ25hdHVyZXNIYXNoKHNpZywgZGF0YVByb3Aub2Zmc2V0LCB7fSkpOw0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIC8qKg0KICAgICAgICAgICAgKiBTd2l0Y2hlcyBwYWdlIHNlbGVjdG9yIHRvIHRoZSBmaXJzdCBwYWdlIGFuZCB1cGRhdGVzIGhhc2ggcGFyYW1ldGVycw0KICAgICAgICAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBFdmVudCBvYmplY3QgdGhhdCBjb250YWlucyB0YXJnZXQgd2l0aCBzZWxlY3RlZCBjb21wb25lbnQgdmFsdWUNCiAgICAgICAgICAgICogQG1lbWJlck9mIG1vZHVsZTpzZWFyY2hQYWdlU2VsZWN0b3IuU2VhcmNoUGFnZVNlbGVjdG9yVmlldw0KICAgICAgICAgICAgKiBAYWxpYXMgbW9kdWxlOnNlYXJjaFBhZ2VTZWxlY3Rvci5TZWFyY2hQYWdlU2VsZWN0b3JWaWV3I3Nob3dGaXJzdFBhZ2UNCiAgICAgICAgICAgICovDQogICAgICAgICAgICBzaG93Rmlyc3RQYWdlOiBmdW5jdGlvbiAoZXZlbnQpIHsNCiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOw0KDQogICAgICAgICAgICAgICAgdmFyIHNpZyA9IHRoaXMubW9kZWwuZ2V0KCJzaWciKSwNCiAgICAgICAgICAgICAgICAgICAgZGF0YVByb3AgPSAkKGV2ZW50LnRhcmdldCkuZGF0YSgpOw0KDQogICAgICAgICAgICAgICAgcXVlcnlNb2RlbC51cGRhdGVIYXNoKHRoaXMudXBkYXRlU2lnbmF0dXJlc0hhc2goc2lnLCAwLCB7fSkpOw0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIC8qKg0KICAgICAgICAgICAgKiBTd2l0Y2hlcyBwYWdlIHNlbGVjdG9yIHRvIHRoZSBsYXN0IHBhZ2UgYW5kIHVwZGF0ZXMgaGFzaCBwYXJhbWV0ZXJzDQogICAgICAgICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IEV2ZW50IG9iamVjdCB0aGF0IGNvbnRhaW5zIHRhcmdldCB3aXRoIHNlbGVjdGVkIGNvbXBvbmVudCB2YWx1ZQ0KICAgICAgICAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOnNlYXJjaFBhZ2VTZWxlY3Rvci5TZWFyY2hQYWdlU2VsZWN0b3JWaWV3DQogICAgICAgICAgICAqIEBhbGlhcyBtb2R1bGU6c2VhcmNoUGFnZVNlbGVjdG9yLlNlYXJjaFBhZ2VTZWxlY3RvclZpZXcjc2hvd0xhc3RQYWdlDQogICAgICAgICAgICAqLw0KICAgICAgICAgICAgc2hvd0xhc3RQYWdlOiBmdW5jdGlvbiAoZXZlbnQpIHsNCiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOw0KICAgICAgICAgICAgICAgIHZhciBsYXN0UGFnZUl0ZW1zID0gdGhpcy5tb2RlbC5nZXQoInJlc3VsdHNDb3VudCIpICUgdGhpcy5tb2RlbC5nZXQoInBhZ2VTaXplIiksDQogICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IHRoaXMubW9kZWwuZ2V0KCJyZXN1bHRzQ291bnQiKSAtICgobGFzdFBhZ2VJdGVtcyA9PT0gMCkgPyB0aGlzLm1vZGVsLmdldCgicGFnZVNpemUiKSA6IGxhc3RQYWdlSXRlbXMpLA0KICAgICAgICAgICAgICAgICAgICBzaWcgPSB0aGlzLm1vZGVsLmdldCgic2lnIik7DQoNCiAgICAgICAgICAgICAgICBxdWVyeU1vZGVsLnVwZGF0ZUhhc2godGhpcy51cGRhdGVTaWduYXR1cmVzSGFzaChzaWcsIG9mZnNldCwge30pKTsNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICAvKioNCiAgICAgICAgICAgICogU3dpdGNoZXMgcGFnZSBzZWxlY3RvciB0byB0aGUgbmV4dCBwYWdlIGFuZCB1cGRhdGVzIGhhc2ggcGFyYW1ldGVycw0KICAgICAgICAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBFdmVudCBvYmplY3QgdGhhdCBjb250YWlucyB0YXJnZXQgd2l0aCBzZWxlY3RlZCBjb21wb25lbnQgdmFsdWUNCiAgICAgICAgICAgICogQG1lbWJlck9mIG1vZHVsZTpzZWFyY2hQYWdlU2VsZWN0b3IuU2VhcmNoUGFnZVNlbGVjdG9yVmlldw0KICAgICAgICAgICAgKiBAYWxpYXMgbW9kdWxlOnNlYXJjaFBhZ2VTZWxlY3Rvci5TZWFyY2hQYWdlU2VsZWN0b3JWaWV3I3Nob3dOZXh0UGFnZQ0KICAgICAgICAgICAgKi8NCiAgICAgICAgICAgIHNob3dOZXh0UGFnZTogZnVuY3Rpb24gKGV2ZW50KSB7DQogICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsNCg0KICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLm1vZGVsLmdldCgib2Zmc2V0IiksDQogICAgICAgICAgICAgICAgICAgIHNpZyA9IHRoaXMubW9kZWwuZ2V0KCJzaWciKTsNCg0KICAgICAgICAgICAgICAgIGlmICgob2Zmc2V0ICsgdGhpcy5tb2RlbC5nZXQoInBhZ2VTaXplIikpIDwgdGhpcy5tb2RlbC5nZXQoInJlc3VsdHNDb3VudCIpKSB7DQogICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSB0aGlzLm1vZGVsLmdldCgicGFnZVNpemUiKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBxdWVyeU1vZGVsLnVwZGF0ZUhhc2godGhpcy51cGRhdGVTaWduYXR1cmVzSGFzaChzaWcsIG9mZnNldCwge30pKTsNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICAvKioNCiAgICAgICAgICAgICogU3dpdGNoZXMgcGFnZSBzZWxlY3RvciB0byB0aGUgcHJlY2lvdXMgcGFnZSBhbmQgdXBkYXRlcyBoYXNoIHBhcmFtZXRlcnMNCiAgICAgICAgICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgRXZlbnQgb2JqZWN0IHRoYXQgY29udGFpbnMgdGFyZ2V0IHdpdGggc2VsZWN0ZWQgY29tcG9uZW50IHZhbHVlDQogICAgICAgICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6c2VhcmNoUGFnZVNlbGVjdG9yLlNlYXJjaFBhZ2VTZWxlY3RvclZpZXcNCiAgICAgICAgICAgICogQGFsaWFzIG1vZHVsZTpzZWFyY2hQYWdlU2VsZWN0b3IuU2VhcmNoUGFnZVNlbGVjdG9yVmlldyNzaG93UHJldlBhZ2UNCiAgICAgICAgICAgICovDQogICAgICAgICAgICBzaG93UHJldlBhZ2U6IGZ1bmN0aW9uIChldmVudCkgew0KICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7DQoNCiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy5tb2RlbC5nZXQoIm9mZnNldCIpLA0KICAgICAgICAgICAgICAgICAgICBkYXRhUHJvcCA9ICQoZXZlbnQudGFyZ2V0KS5kYXRhKCksDQogICAgICAgICAgICAgICAgICAgIHNpZyA9IHRoaXMubW9kZWwuZ2V0KCJzaWciKTsNCg0KICAgICAgICAgICAgICAgIGlmICgob2Zmc2V0IC0gdGhpcy5tb2RlbC5nZXQoInBhZ2VTaXplIikpID49IDApIHsNCiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0IC09IHRoaXMubW9kZWwuZ2V0KCJwYWdlU2l6ZSIpOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIHF1ZXJ5TW9kZWwudXBkYXRlSGFzaCh0aGlzLnVwZGF0ZVNpZ25hdHVyZXNIYXNoKHNpZywgb2Zmc2V0LCB7fSkpOw0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIC8qKg0KICAgICAgICAgICAgKiBSZW5kZXJzIHZpZXcNCiAgICAgICAgICAgICogQG1lbWJlck9mIG1vZHVsZTpzZWFyY2hQYWdlU2VsZWN0b3IuU2VhcmNoUGFnZVNlbGVjdG9yVmlldw0KICAgICAgICAgICAgKiBAYWxpYXMgbW9kdWxlOnNlYXJjaFBhZ2VTZWxlY3Rvci5TZWFyY2hQYWdlU2VsZWN0b3JWaWV3I3JlbmRlcg0KICAgICAgICAgICAgKi8NCiAgICAgICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgIHZhciBpbnN0ID0gdGhpcywNCiAgICAgICAgICAgICAgICAgICAgZGF0YVByb3AgPSB0aGlzLm1vZGVsLmdldCgiZGF0YVByb3BlcnRpZXMiKS5wcm9wZXJ0aWVzLA0KICAgICAgICAgICAgICAgICAgICByZXN1bHRzQ291bnQgPSB0aGlzLm1vZGVsLmdldCgicmVzdWx0c0NvdW50IiksDQogICAgICAgICAgICAgICAgICAgIHBhZ2VTaXplID0gdGhpcy5tb2RlbC5nZXQoInBhZ2VTaXplIiksDQogICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkVmFsdWUgPSB0aGlzLm1vZGVsLmdldCgic2VsZWN0ZWRWYWx1ZSIpLA0KICAgICAgICAgICAgICAgICAgICBwYWdlc0NvdW50ID0gTWF0aC5jZWlsKHJlc3VsdHNDb3VudCAvIHBhZ2VTaXplKSwNCiAgICAgICAgICAgICAgICAgICAgcGFnZXMgPSBbXSwNCiAgICAgICAgICAgICAgICAgICAgcmFuZ2VTdGFydCA9IHNlbGVjdGVkVmFsdWUgLSBkYXRhUHJvcC50cmVzaG9sZCAvIDIsDQogICAgICAgICAgICAgICAgICAgIHJhbmdlRW5kID0gc2VsZWN0ZWRWYWx1ZSArIGRhdGFQcm9wLnRyZXNob2xkIC8gMiwNCiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVPYmo7DQoNCiAgICAgICAgICAgICAgICBpZiAocmFuZ2VTdGFydCA8IDApIHsNCiAgICAgICAgICAgICAgICAgICAgcmFuZ2VFbmQgKz0gTWF0aC5hYnMocmFuZ2VTdGFydCk7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgaWYgKHJhbmdlRW5kID4gcGFnZXNDb3VudCkgew0KICAgICAgICAgICAgICAgICAgICByYW5nZVN0YXJ0IC09IChyYW5nZUVuZCAtIHBhZ2VzQ291bnQpOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGlmIChkYXRhUHJvcC50cmVzaG9sZCA+PSBwYWdlc0NvdW50KSB7DQogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFnZXNDb3VudDsgaSsrKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBwYWdlcy5wdXNoKHsgbnVtYmVyOiBpICsgMSwgb2Zmc2V0OiBpICogcGFnZVNpemUgfSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHBhZ2VzQ291bnQ7IGkrKykgew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChpID09PSAxKSB8fCAoaSA9PT0gcGFnZXNDb3VudCkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlcy5wdXNoKHsgbnVtYmVyOiBpLCBvZmZzZXQ6IChpIC0gMSkgKiBwYWdlU2l6ZSB9KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKChpID49IHJhbmdlU3RhcnQpICYmIChpIDw9IHJhbmdlRW5kKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VzLnB1c2goeyBudW1iZXI6IGksIG9mZnNldDogKGkgLSAxKSAqIHBhZ2VTaXplIH0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgdGVtcGxhdGVPYmogPSB7DQogICAgICAgICAgICAgICAgICAgIHByZXZpb3VzOiBkYXRhUHJvcC5wcmV2aW91cywNCiAgICAgICAgICAgICAgICAgICAgZmlyc3Q6IGRhdGFQcm9wLmZpcnN0LA0KICAgICAgICAgICAgICAgICAgICBuZXh0OiBkYXRhUHJvcC5uZXh0LA0KICAgICAgICAgICAgICAgICAgICBsYXN0OiBkYXRhUHJvcC5sYXN0LA0KICAgICAgICAgICAgICAgICAgICBwYWdlczogcGFnZXMsDQogICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkVmFsdWU6IHNlbGVjdGVkVmFsdWUNCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9IF8udGVtcGxhdGUoaW5zdC5tb2RlbC5nZXQoInRlbXBsYXRlIikpOw0KICAgICAgICAgICAgICAgIHZhciB0ZW1wbGF0ZVJlc3VsdCA9IHRlbXBsYXRlKHsgZGF0YTogdGVtcGxhdGVPYmogfSk7DQogICAgICAgICAgICAgICAgdGhpcy4kZWwuaHRtbCh0ZW1wbGF0ZVJlc3VsdCk7DQoNCiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUJ1dHRvblN0YXRlKHNlbGVjdGVkVmFsdWUsIHBhZ2VzQ291bnQpOw0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIC8qKg0KICAgICAgICAgICAgKiBTZXRzIHVwIHBhZ2Ugc2VsZWN0b3JzIGJ1dHRvbnMgc3RhdGUgZGVwZW5kaW5nIG9uIHNlbGVjdGVkIHZhbHVlcw0KICAgICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gc2VsZWN0ZWRQYWdlIG51bWJlciBvZiBzZWxlY3RlZCBwYWdlDQogICAgICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwYWdlQ291bnQgbnVtYmVyIG9mIHBhZ2VzDQogICAgICAgICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6c2VhcmNoUGFnZVNlbGVjdG9yLlNlYXJjaFBhZ2VTZWxlY3RvclZpZXcNCiAgICAgICAgICAgICogQGFsaWFzIG1vZHVsZTpzZWFyY2hQYWdlU2VsZWN0b3IuU2VhcmNoUGFnZVNlbGVjdG9yVmlldyNoYW5kbGVCdXR0b25TdGF0ZQ0KICAgICAgICAgICAgKi8NCiAgICAgICAgICAgIGhhbmRsZUJ1dHRvblN0YXRlOiBmdW5jdGlvbiAoc2VsZWN0ZWRQYWdlLCBwYWdlQ291bnQpIHsNCiAgICAgICAgICAgICAgICB0aGlzLiRlbC5maW5kKCIucGFnZS1zZWxlY3Rvci1pdGVtLWxhc3QsIC5wYWdlLXNlbGVjdG9yLWl0ZW0tbmV4dCIpLnJlbW92ZUNsYXNzKCJpbmFjdGl2ZSIpOw0KICAgICAgICAgICAgICAgIHRoaXMuJGVsLmZpbmQoIi5wYWdlLXNlbGVjdG9yLWl0ZW0tZmlyc3QsIC5wYWdlLXNlbGVjdG9yLWl0ZW0tcHJldmlvdXMiKS5yZW1vdmVDbGFzcygiaW5hY3RpdmUiKTsNCg0KDQogICAgICAgICAgICAgICAgaWYgKHBhZ2VDb3VudCA9PSAwKSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuJGVsLmZpbmQoIi5wYWdlLXNlbGVjdG9yLWl0ZW0tZmlyc3QsIC5wYWdlLXNlbGVjdG9yLWl0ZW0tcHJldmlvdXMiKS5hZGRDbGFzcygiaW5hY3RpdmUiKTsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWwuZmluZCgiLnBhZ2Utc2VsZWN0b3ItaXRlbS1sYXN0LCAucGFnZS1zZWxlY3Rvci1pdGVtLW5leHQiKS5hZGRDbGFzcygiaW5hY3RpdmUiKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZFBhZ2UgPT0gMSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWwuZmluZCgiLnBhZ2Utc2VsZWN0b3ItaXRlbS1maXJzdCwgLnBhZ2Utc2VsZWN0b3ItaXRlbS1wcmV2aW91cyIpLmFkZENsYXNzKCJpbmFjdGl2ZSIpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZFBhZ2UgPT0gcGFnZUNvdW50KSB7DQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbC5maW5kKCIucGFnZS1zZWxlY3Rvci1pdGVtLWxhc3QsIC5wYWdlLXNlbGVjdG9yLWl0ZW0tbmV4dCIpLmFkZENsYXNzKCJpbmFjdGl2ZSIpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIC8qKg0KICAgICAgICAgICAgKiBVcGRhdGVzIGhhc2ggYW5kIG1vZGVsIGJhc2VkIG9uIGRhdGEgb2JqZWN0DQogICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIERhdGEgdGhhdCBjb250YWlucyBjb21wb25lbnQgcHJvcGVydGllcw0KICAgICAgICAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOnNlYXJjaFBhZ2VTZWxlY3Rvci5TZWFyY2hQYWdlU2VsZWN0b3JWaWV3DQogICAgICAgICAgICAqIEBhbGlhcyBtb2R1bGU6c2VhcmNoUGFnZVNlbGVjdG9yLlNlYXJjaFBhZ2VTZWxlY3RvclZpZXcjaGFuZGxlTG9hZGVkRGF0YQ0KICAgICAgICAgICAgKi8NCiAgICAgICAgICAgIGhhbmRsZUxvYWRlZERhdGE6IGZ1bmN0aW9uIChkYXRhKSB7DQogICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLA0KICAgICAgICAgICAgICAgICAgICBzaWcgPSB0aGlzLm1vZGVsLmdldCgiZGF0YVByb3BlcnRpZXMiKS5wcm9wZXJ0aWVzLnNlYXJjaFJlc3VsdHNTaWduYXR1cmUuc3BsaXQoJywnKSwNCiAgICAgICAgICAgICAgICAgICAgaGFzaCA9IHF1ZXJ5TW9kZWwucGFyc2VIYXNoUGFyYW1ldGVycyh3aW5kb3cubG9jYXRpb24uaGFzaCksDQogICAgICAgICAgICAgICAgICAgIG5ld1NlbGVjdGVkVmFsdWUsDQogICAgICAgICAgICAgICAgICAgIHBhcmFtLA0KICAgICAgICAgICAgICAgICAgICBoYXNoT2JqLA0KICAgICAgICAgICAgICAgICAgICBpOw0KDQogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhLm9mZnNldCA9PT0gJ3VuZGVmaW5lZCcpIHsNCiAgICAgICAgICAgICAgICAgICAgZGF0YS5vZmZzZXQgPSAwOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzaWcubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGVuY29kZVVSSUNvbXBvbmVudChzaWdbaV0pID09PSBkYXRhLnNlYXJjaFJlc3VsdHNTaWduYXR1cmUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnBhZ2VTaXplID49IGRhdGEuZGF0YUNvdW50IHx8IGRhdGEub2Zmc2V0ID4gZGF0YS5kYXRhQ291bnQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1doZW4gd2UgaGF2ZSBsZXNzIHJlc3VsdHMgdGhlbiBwYWdlIHNpemUgdGhlbiBzaG93IGZpcnN0IHBhZ2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZU1vZGVsQWZ0ZXJTZWFyY2goZGF0YSwgMSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9XYWl0IHRpbGwgYWxsIHJlcXVlc3RzIGFyZSBkb25lIGFuZCBnbyB0byBmaXJzdCBwYWdlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcXVlcnlNb2RlbC51cGRhdGVIYXNoKHtlOiAwfSk7IC8vLSB0aGlzIHdpbGwgd29yaywgYnV0IGRvZXNuJ3QgZ2l2ZSB1cyBwcm9wZXIgYnJvd3NlciBoaXN0b3J5DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc2hPYmogPSBxdWVyeU1vZGVsLnBhcnNlSGFzaFBhcmFtZXRlcnMod2luZG93LmxvY2F0aW9uLmhhc2gpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbSA9IGRhdGEuc2VhcmNoUmVzdWx0c1NpZ25hdHVyZSAhPT0gIiIgPyBkYXRhLnNlYXJjaFJlc3VsdHNTaWduYXR1cmUgKyAiX2UiIDogImUiOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzaFtwYXJhbV0gIT09ICIwIikgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzaE9ialtwYXJhbV0gPSAwOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQmFja2JvbmUuaGlzdG9yeS5uYXZpZ2F0ZSh0aGF0LmNyZWF0ZUZpcnN0UGFnZVVybEhhc2goaGFzaE9iaiksIHsgdHJpZ2dlcjogdHJ1ZSwgcmVwbGFjZTogdHJ1ZSB9KTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwMCk7DQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1NlbGVjdGVkVmFsdWUgPSBNYXRoLmNlaWwoZGF0YS5vZmZzZXQgLyBkYXRhLnBhZ2VTaXplKSArIDE7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVNb2RlbEFmdGVyU2VhcmNoKGRhdGEsIG5ld1NlbGVjdGVkVmFsdWUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIC8qKg0KICAgICAgICAgICAgKiBDYWxjdWxhdGVzIGhhc2ggcGFyYW1ldGVycyBmb3IgZmlyc3QgcGFnZQ0KICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSBEYXRhIHRoYXQgY29udGFpbnMgY29tcG9uZW50IHByb3BlcnRpZXMNCiAgICAgICAgICAgICogQG1lbWJlck9mIG1vZHVsZTpzZWFyY2hQYWdlU2VsZWN0b3IuU2VhcmNoUGFnZVNlbGVjdG9yVmlldw0KICAgICAgICAgICAgKiBAYWxpYXMgbW9kdWxlOnNlYXJjaFBhZ2VTZWxlY3Rvci5TZWFyY2hQYWdlU2VsZWN0b3JWaWV3I2NyZWF0ZUZpcnN0UGFnZVVybEhhc2gNCiAgICAgICAgICAgICogQHJldHVybnMge1N0cmluZ30gaGFzaCBwYXJhbWV0ZXIgZm9yIGZpcnN0IHBhZ2UNCiAgICAgICAgICAgICovDQogICAgICAgICAgICBjcmVhdGVGaXJzdFBhZ2VVcmxIYXNoOiBmdW5jdGlvbiAoaGFzaE9iaikgew0KICAgICAgICAgICAgICAgIHZhciBoYXNoU3RyID0gIiI7DQoNCiAgICAgICAgICAgICAgICB2YXIgaSA9IDA7DQogICAgICAgICAgICAgICAgXy5lYWNoKGhhc2hPYmosIGZ1bmN0aW9uIChpdGVtLCBrZXkpIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPiAwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBoYXNoU3RyICs9ICImIjsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBpKys7DQogICAgICAgICAgICAgICAgICAgIGhhc2hTdHIgKz0ga2V5ICsgIj0iICsgZW5jb2RlVVJJQ29tcG9uZW50KGl0ZW0pOw0KICAgICAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAgICAgcmV0dXJuIGhhc2hTdHI7DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KDQogICAgLyoqDQogICAgKiBGb3IgZWFjaCBwYWdlIHNlbGVjdG9yIG9uIGEgcGFnZSBjcmVhdGVzIGluc3RhbmNlIG9mIA0KICAgICogWyJTZWFyY2hQYWdlU2VsZWN0b3JNb2RlbCJde0BsaW5rIG1vZHVsZTpzZWFyY2hQYWdlU2VsZWN0b3IuU2VhcmNoUGFnZVNlbGVjdG9yTW9kZWx9IGFuZCANCiAgICAqIFsiU2VhcmNoUGFnZVNlbGVjdG9yVmlldyJde0BsaW5rIG1vZHVsZTpzZWFyY2hQYWdlU2VsZWN0b3IuU2VhcmNoUGFnZVNlbGVjdG9yVmlld30gDQogICAgKiBAbWVtYmVyT2YgbW9kdWxlOnNlYXJjaFBhZ2VTZWxlY3Rvcg0KICAgICogQGFsaWFzIG1vZHVsZTpzZWFyY2hQYWdlU2VsZWN0b3IuU2VhcmNoUGFnZVNlbGVjdG9yVmlldy5pbml0DQogICAgKi8NCiAgICBhcGkuaW5pdCA9IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgaWYgKCQoImJvZHkiKS5oYXNDbGFzcygib24tcGFnZS1lZGl0b3IiKSkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgcXVlcnlNb2RlbCA9IFhBLmNvbXBvbmVudC5zZWFyY2gucXVlcnk7DQoNCiAgICAgICAgdmFyIHNlYXJjaFBhZ2VTZWxlY3RvciA9ICQoIi5wYWdlLXNlbGVjdG9yOm5vdCguaW5pdGlhbGl6ZWQpIik7DQoNCiAgICAgICAgXy5lYWNoKHNlYXJjaFBhZ2VTZWxlY3RvciwgZnVuY3Rpb24gKGVsZW0pIHsNCiAgICAgICAgICAgIHZhciAkZWwgPSAkKGVsZW0pOw0KDQogICAgICAgICAgICBuZXcgU2VhcmNoUGFnZVNlbGVjdG9yVmlldyh7IGVsOiAkZWwsIG1vZGVsOiBuZXcgU2VhcmNoUGFnZVNlbGVjdG9yTW9kZWwgfSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgICRlbC5hZGRDbGFzcygiaW5pdGlhbGl6ZWQiKTsNCiAgICAgICAgfSk7DQogICAgfTsNCg0KICAgIHJldHVybiBhcGk7DQoNCn0oalF1ZXJ5LCBkb2N1bWVudCkpOw0KDQpYQS5yZWdpc3Rlcignc2VhcmNoUGFnZVNlbGVjdG9yJywgWEEuY29tcG9uZW50LnNlYXJjaC5wYWdlU2VsZWN0b3IpOw0K
- ID: "6954b7c7-2487-423f-8600-436cb3b6dc0e"
  Hint: Size
  Value: 18681
- ID: "6f47a0a5-9c94-4b48-abeb-42d38def6054"
  Hint: Mime Type
  Value: "application/x-javascript"
- ID: "ba3f86a2-4a1c-4d78-b63d-91c2779c1b5e"
  Hint: __Sortorder
  Value: 1200
- ID: "c06867fe-9a43-4c7d-b739-48780492d06f"
  Hint: Extension
  Value: js
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20160728T134137Z
    - ID: "5dd74568-4d4b-44c1-b513-0af5f4cda34f"
      Hint: __Created by
      Value: |
        sitecore\admin
    - ID: "8cdc337e-a112-42fb-bbb4-4143751e123f"
      Hint: __Revision
      Value: "a73489b6-eb03-4fc7-a4b3-61d3c8412153"
